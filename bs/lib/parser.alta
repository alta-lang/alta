import Vector from "vector"
import String from "string"
import Size from "types"
import Box from "memory"
import Map from "map"
import Pair from "util"
import unescape from "./util"

import Token, TokenType from "./lexer.alta"
import "./ast" as ast

struct State {
	index: Size;
}

export class Parser {
	private var tokens: Vector<Token>
	private var _root: Box<ast.RootNode> = nullptr
	private var state: State

	#
	# public API
	#

	public constructor() {}

	public @read function root(): Box<ast.RootNode> {
		return this._root
	}

	public async function run(tokens: Vector<Token>): void {
		this.tokens = tokens
		this._root = await this.parseRootNode()
	}

	#
	# private helper functions
	#

	public function expect(tokenType: TokenType): Token? {
		if this.state.index >= this.tokens.length
			return null
		if this.tokens[this.state.index].type != tokenType
			return null
		return this.tokens[this.state.index++]
	}

	public function expectKeyword(keyword: String): Token? {
		if this.state.index >= this.tokens.length
			return null
		if this.tokens[this.state.index].type != TokenType.Identifier
			return null
		if this.tokens[this.state.index].content != keyword
			return null
		return this.tokens[this.state.index++]
	}

	#
	# rules
	#

	private async function parseRootNode(): Box<ast.RootNode> {
		let root: Box<ast.RootNode> = new* ast.RootNode
		while true {
			let statement = await this.parseRootStatement()
			if !statement
				break
			root.proxy.statements.push(statement)
		}
		return root
	}

	private async function parseRootStatement(): Box<ast.RootStatement> {
		if let import = await this.parseImport()
			return import

		if let func = await this.parseFunctionDefinition()
			return func

		return nullptr
	}

	private async function parseImport(): Box<ast.Import> {
		let savedState = this.state
		let import: Box<ast.Import> = new* ast.Import

		if !this.expectKeyword("import") {
			this.state = savedState
			return nullptr
		}

		let str = this.expect(TokenType.String)
		if str {
			if !this.expectKeyword("as") {
				this.state = savedState
				return nullptr
			}

			let query = (*str).content
			import.proxy.query = unescape(query.substring(from: 1, length: query.length - 2))

			let id = this.expect(TokenType.Identifier)
			if !id {
				this.state = savedState
				return null
			}

			import.proxy.alias = (*id).content

			return import
		}

		let expectClosingBrace = false

		if this.expect(TokenType.OpeningBrace) {
			expectClosingBrace = true
		}

		while true {
			let item = await this.parseImportItem()
			if !item {
				break
			}
			import.proxy.imports.push(*item)
			if !this.expect(TokenType.Comma) {
				break
			}
		}

		if expectClosingBrace && !this.expect(TokenType.ClosingBrace) {
			this.state = savedState
			return nullptr
		}

		if import.proxy.imports.length == 0 || !this.expectKeyword("from") {
			this.state = savedState
			return nullptr
		}
		str = this.expect(TokenType.String)
		if !str {
			this.state = savedState
			return nullptr
		}
		let query = (*str).content
		import.proxy.query = unescape(query.substring(from: 1, length: query.length - 2))

		return import
	}

	private async function parseImportItem(): ast.ImportItem? {
		let savedState = this.state
		let item = new ast.ImportItem

		while true {
			let id = this.expect(TokenType.Identifier)
			if !id {
				break
			}
			item.components.push((*id).content)
			if !this.expect(TokenType.Dot) {
				break
			}
		}

		if item.components.length == 0 {
			this.state = savedState
			return null
		}

		if (this.expectKeyword("as")) {
			let id = this.expect(TokenType.Identifier)
			if !id {
				this.state = savedState
				return null
			}

			item.alias = (*id).content
		}

		return item
	}

	private async function parseFunctionDefinition(): Box<ast.FunctionDefinition> {
		let savedState = this.state
		let func: Box<ast.FunctionDefinition> = new* ast.FunctionDefinition

		while true {
			let attr = await this.parseAttribute()
			if !attr
				break
			func.proxy.attributes.push(attr)
		}

		if !this.expectKeyword("function") {
			this.state = savedState
			return nullptr
		}

		let name = this.expect(TokenType.Identifier)
		if !name {
			this.state = savedState
			return nullptr
		}
		func.proxy.name = (*name).content

		if !this.expect(TokenType.OpeningParenthesis) {
			this.state = savedState
			return nullptr
		}

		while true {
			let param = await this.parseParameter()
			if !param
				break
			func.proxy.parameters.push(param)

			if !this.expect(TokenType.Comma)
				break
		}

		if !(this.expect(TokenType.ClosingParenthesis) && this.expect(TokenType.Colon)) {
			this.state = savedState
			return nullptr
		}

		let returnType = await this.parseType()
		if !returnType {
			this.state = savedState
			return nullptr
		}
		func.proxy.returnType = returnType

		let body = await this.parseStatement()
		if !body {
			this.state = savedState
			return nullptr
		}
		func.proxy.body = body

		return func
	}

	private async function parseAttribute(): Box<ast.Attribute> {
		let savedState = this.state
		let attr: Box<ast.Attribute> = new* ast.Attribute

		if !this.expect(TokenType.AtSign) {
			this.state = savedState
			return nullptr
		}

		let name = this.expect(TokenType.Identifier)
		if !name {
			this.state = savedState
			return nullptr
		}
		attr.proxy.components.push((*name).content)

		return attr
	}

	private async function parseParameter(): Box<ast.Parameter> {
		let savedState = this.state
		let param: Box<ast.Parameter> = new* ast.Parameter

		let name = this.expect(TokenType.Identifier)
		if !name {
			this.state = savedState
			return nullptr
		}
		param.proxy.name = (*name).content

		if !this.expect(TokenType.Colon) {
			this.state = savedState
			return nullptr
		}

		let type = await this.parseType()
		if !type {
			this.state = savedState
			return nullptr
		}
		param.proxy.type = type

		return param
	}

	private async function parseType(): Box<ast.Type> {
		let savedState = this.state
		let type: Box<ast.Type> = new* ast.Type

		if this.expectKeyword("ref") || this.expect(TokenType.Ampersand) {
			type.proxy.isReference = true
		}

		if this.expectKeyword("mut") || this.expect(TokenType.ExclamationMark) {
			type.proxy.isMutable = true
		}

		if this.expect(TokenType.OpeningSquare) {
			let itemType = await this.parseType()
			if !itemType {
				this.state = savedState
				return nullptr
			}

			type.proxy.arrayType = itemType

			if !this.expect(TokenType.ClosingSquare) {
				this.state = savedState
				return nullptr
			}
		} else if this.expectKeyword("ptr") || this.expect(TokenType.Asterisk) {
			let pointerType = await this.parseType()
			if !pointerType {
				this.state = savedState
				return nullptr
			}

			type.proxy.pointerType = pointerType
		} else {
			let target = await this.parseStrictAccessor()
			if !target {
				this.state = savedState
				return nullptr
			}
			type.proxy.target = target
		}

		return type
	}

	private async function parseStatement(): Box<ast.Statement> {
		if let block = await this.parseBlock()
			return block

		if let ret = await this.parseReturnDirective()
			return ret

		if let for = await this.parseForLoop()
			return for

		if let expr = await this.parseExpression() {
			let exprStmt: Box<ast.ExpressionStatement> = new* ast.ExpressionStatement
			exprStmt.proxy.expression = expr
			return exprStmt
		}

		return nullptr
	}

	private async function parseForLoop(): Box<ast.ForLoop> {
		let savedState = this.state
		let loop: Box<ast.ForLoop> = new* ast.ForLoop

		if !this.expectKeyword("for") {
			this.state = savedState
			return nullptr
		}

		let counterName = this.expect(TokenType.Identifier)
		if !counterName {
			this.state = savedState
			return nullptr
		}
		loop.proxy.counterName = (*counterName).content

		if this.expect(TokenType.Colon) {
			let counterType = await this.parseType()
			if !counterType {
				this.state = savedState
				return nullptr
			}
			loop.proxy.counterType = counterType
		}

		if !this.expectKeyword("in") {
			this.state = savedState
			return nullptr
		}

		let iterator = await this.parseExpression()
		if !iterator {
			this.state = savedState
			return nullptr
		}
		loop.proxy.iterator = iterator

		let body = await this.parseStatement()
		if !body {
			this.state = savedState
			return nullptr
		}
		loop.proxy.body = body

		return loop
	}

	private async function parseBlock(): Box<ast.Block> {
		let savedState = this.state
		let block: Box<ast.Block> = new* ast.Block

		if !this.expect(TokenType.OpeningBrace) {
			this.state = savedState
			return nullptr
		}

		while true {
			let stmt = await this.parseStatement()
			if !stmt
				break
			block.proxy.statements.push(stmt)
		}

		if !this.expect(TokenType.ClosingBrace) {
			this.state = savedState
			return nullptr
		}

		return block
	}

	private async function parseStrictAccessor(): Box<ast.Accessor> {
		let savedState = this.state
		let acc: Box<ast.Accessor> = new* ast.Accessor

		let member = this.expect(TokenType.Identifier)
		if !member {
			this.state = savedState
			return nullptr
		}
		acc.proxy.member = (*member).content

		while true {
			let loopSavedState = this.state

			if !this.expect(TokenType.Dot) {
				this.state = loopSavedState
				break
			}

			let innerMember = this.expect(TokenType.Identifier)
			if !innerMember {
				this.state = loopSavedState
				break
			}

			let newAccessor: Box<ast.Accessor> = new* ast.Accessor
			newAccessor.proxy.member = (*innerMember).content
			newAccessor.proxy.target = acc

			acc = newAccessor
		}

		return acc
	}

	private async function parseReturnDirective(): Box<ast.ReturnDirective> {
		let savedState = this.state
		let ret: Box<ast.ReturnDirective> = new* ast.ReturnDirective

		if !this.expectKeyword("return") {
			this.state = savedState
			return nullptr
		}

		let expr = await this.parseExpression()
		if !expr {
			this.state = savedState
			return nullptr
		}
		ret.proxy.expression = expr

		return ret
	}

	private async function parseExpression(): Box<ast.Expression> {
		let expr = await this.parseRangeExpression()
		if expr
			return expr

		return nullptr
	}

	private async function parseRangeExpression(): Box<ast.Expression> {
		let savedState = this.state

		let target = await this.parseFunctionCallOrSubscriptOrAccessorOrPostIncDec()
		if !target {
			this.state = savedState
			return nullptr
		}

		savedState = this.state
		if this.expect(TokenType.Dot) && this.expect(TokenType.Dot) {
			let includesEnd = !!this.expect(TokenType.Dot)
			let range: Box<ast.RangeExpression> = new* ast.RangeExpression
			let otherExpr = await this.parseFunctionCallOrSubscriptOrAccessorOrPostIncDec()

			if otherExpr {
				range.proxy.includesEnd = true
				range.proxy.descreasing = false
				range.proxy.start = target
				range.proxy.end = otherExpr

				target = range
			} else {
				this.state = savedState
			}
		} else if this.expect(TokenType.Colon) && this.expect(TokenType.Colon) {
			let includesEnd = !!this.expect(TokenType.Colon)
			let range: Box<ast.RangeExpression> = new* ast.RangeExpression
			let otherExpr = await this.parseFunctionCallOrSubscriptOrAccessorOrPostIncDec()

			if otherExpr {
				range.proxy.includesEnd = true
				range.proxy.descreasing = false
				range.proxy.start = target
				range.proxy.end = otherExpr

				target = range
			} else {
				this.state = savedState
			}
		}

		return target
	}

	private async function parseIntegerLiteral(): Box<ast.Expression> {
		let savedState = this.state
		let int: Box<ast.IntegerLiteral> = new* ast.IntegerLiteral

		let num = this.expect(TokenType.Integer)
		if !num {
			this.state = savedState
			return nullptr
		}
		int.proxy.raw = (*num).content

		return int
	}

	private async function parseStringLiteral(): Box<ast.Expression> {
		let savedState = this.state
		let string: Box<ast.StringLiteral> = new* ast.StringLiteral

		let str = this.expect(TokenType.String)
		if !str {
			this.state = savedState
			return nullptr
		}
		string.proxy.raw = (*str).content

		return string
	}

	private async function parseGroupedExpression(): Box<ast.Expression> {
		let savedState = this.state

		if !this.expect(TokenType.OpeningParenthesis) {
			this.state = savedState
			return nullptr
		}

		let expr = await this.parseExpression()
		if !expr {
			this.state = savedState
			return nullptr
		}

		if !this.expect(TokenType.ClosingParenthesis) {
			this.state = savedState
			return nullptr
		}

		return expr
	}

	private async function parseStructureExpression(): Box<ast.Expression> {
		let savedState = this.state
		let struct: Box<ast.StructureExpression> = nullptr
		let deferToLowerPrecedences = false

		# used as a workaround for the C++-written compiler for Alta not having `goto`
		while true {
			if !this.expectKeyword("new") {
				deferToLowerPrecedences = true
				break
			}

			let name = await this.parseStrictAccessor()
			if !name {
				this.state = savedState
				deferToLowerPrecedences = true
				break
			}

			struct = new* ast.StructureExpression
			struct.proxy.target = name

			let stateBeforeArguments = this.state

			if this.expect(TokenType.OpeningBrace) {
				while true {
					let prevState = this.state
					let label = this.expect(TokenType.Identifier)
					if !label || !this.expect(TokenType.Colon) {
						this.state = prevState
						break
					}

					let expr = await this.parseExpression()
					if !expr {
						this.state = prevState
						break
					}

					struct.proxy.arguments.push(new Pair<String, Box<ast.Expression>>((*label).content, expr))

					if !this.expect(TokenType.Comma) {
						break
					}
				}

				if !this.expect(TokenType.ClosingBrace) {
					this.state = stateBeforeArguments
					struct = nullptr
					break
				}
			}

			break
		}

		if deferToLowerPrecedences {
			if let int = await this.parseIntegerLiteral()
				return int

			if let string = await this.parseStringLiteral()
				return string

			if let acc = await this.parseStrictAccessor()
				return acc

			if let expr = await this.parseGroupedExpression()
				return expr

			return nullptr
		} else {
			return struct
		}
	}

	private async function parseFunctionCallOrSubscriptOrAccessorOrPostIncDec(): Box<ast.Expression> {
		let savedState = this.state

		let target = await this.parseStructureExpression()
		if !target {
			this.state = savedState
			return nullptr
		}

		return target
	}
}
