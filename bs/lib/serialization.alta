import String, CodePoint from "string"
import Map from "map"
import Vector from "vector"
import Pair from "util"

function escape(string: String): String {
	let result = new String
	for cp: CodePoint in string.items {
		if cp.byteLength > 1 {
			# dealing with a Unicode char; don't compare to byte (or else CodePoint will throw an exception)
			result += cp
			continue
		}
		if cp == '\n' {
			result += "\\n"
		} else if cp == '\r' {
			result += "\\r"
		} else if cp == '\b' {
			result += "\\b"
		} else if cp == '\f' {
			result += "\\f"
		} else if cp == '\t' {
			result += "\\t"
		} else {
			if cp == '"' || cp == '\\' {
				result += '\\'
			}
			result += cp
		}
	}
	return result
}

# the `ptr void` is a stupid workaround for an issue with the current compiler written in C++;
# you can't reference yourself in a generic or an optional or a union (and probably not a function type either)

export class SerialNode {
	public var name: String
	public var content: String

	private var _attributes: Map<String, ptr void>
	private var _children: Vector<ptr void>

	public constructor(name: String = "", content: String = "") {
		this.name = name
		this.content = content
	}

	public @copy constructor(other: ref SerialNode) {
		this.name = other.name
		this.content = other.content

		for pair: Pair<String, ptr void> in other._attributes.items {
			let node: ref SerialNode = *(pair.second as ptr SerialNode)
			this._attributes[pair.first] = (&new* SerialNode(node)) as ptr void
		}

		for pointer: ptr void in other._children.items {
			let child: ref SerialNode = *(pointer as ptr SerialNode)
			this._children.push((&new* SerialNode(child)) as ptr void)
		}
	}

	public destructor() {
		for pair: Pair<String, ptr void> in this._attributes.items {
			let node = pair.second as ptr SerialNode
			delete* node
		}
		for pointer: ptr void in this._children.items {
			let child = pointer as ptr SerialNode
			delete* child
		}
	}

	public @read function attributeNames(): Vector<String> {
		return this._attributes.keys
	}

	public @read generator function children(): SerialNode {
		for pointer: ptr void in this._children.items {
			let child: ref SerialNode = *(pointer as ptr SerialNode)
			yield child
		}
		return;
	}

	public function getAttribute(name: String): SerialNode {
		return *(this._attributes[name] as ptr SerialNode)
	}

	public function setAttribute(name: String, value: SerialNode): void {
		if this._attributes.has(name)
			delete* this._attributes[name]
		this._attributes[name] = (&new* SerialNode(value)) as ptr void
	}

	public function addChild(child: SerialNode): void {
		this._children.push((&new* SerialNode(child)) as ptr void)
	}

	private function toPrettyString(indent: String): String {
		let result = new String

		result += this.name + " {"

		for pair: Pair<String, ptr void> in this._attributes.items {
			let node: ref SerialNode = *(pair.second as ptr SerialNode)
			if node.name.length == 0 {
				result += '\n' + indent + '\t' + pair.first + " = \"" + escape(node.content) + '"'
			} else {
				result += '\n' + indent + '\t' + pair.first + " = " + node.toPrettyString(indent + '\t')
			}
		}

		if this.content.length > 0 {
			if this._attributes.count == 0 && this._children.length == 0 {
				result += ' ' + this.content + ' '
			} else {
				result += '\n' + indent + "\t[content] = \"" + escape(this.content) + '"'
			}
		}

		for pointer: ptr void in this._children.items {
			let child: ref SerialNode = *(pointer as ptr SerialNode)
			result += '\n' + indent + '\t' + child.toPrettyString(indent + '\t')
		}

		if this._attributes.count == 0 && this._children.length == 0 {
			result += '}'
		} else {
			result += '\n' + indent + '}'
		}

		return result
	}

	public to String {
		return this.toPrettyString("")
	}
}
