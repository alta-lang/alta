import String from "string"
import Map from "map"
import Vector from "vector"
import Pair from "util"
import escape from "./util"

export class SerialNode {
	public var name: String
	public var content: String

	private var _attributes: Map<String, SerialNode>
	private var _children: Vector<SerialNode>

	public constructor(name: String = "", content: String = "") {
		this.name = name
		this.content = content
	}

	public @read function attributeNames(): Vector<String> {
		return this._attributes.keys
	}

	public @read generator function children(): ref SerialNode {
		for child: ref SerialNode in this._children.items {
			yield child
		}
		return;
	}

	public function getAttribute(name: String): ref SerialNode {
		return this._attributes[name]
	}

	public function setAttribute(name: String, value: SerialNode): void {
		this._attributes[name] = value
	}

	public function addChild(child: SerialNode): void {
		this._children.push(child)
	}

	private function toPrettyString(indent: String): String {
		let result = new String

		result += this.name + " {"

		for pair: Pair<String, SerialNode> in this._attributes.items {
			let node: ref SerialNode = pair.second
			if node.name.length == 0 {
				result += '\n' + indent + '\t' + pair.first + " = \"" + escape(node.content) + '"'
			} else {
				result += '\n' + indent + '\t' + pair.first + " = " + node.toPrettyString(indent + '\t')
			}
		}

		if this.content.length > 0 {
			if this._attributes.count == 0 && this._children.length == 0 {
				result += ' ' + this.content + ' '
			} else {
				result += '\n' + indent + "\t[content] = \"" + escape(this.content) + '"'
			}
		}

		for child: ref SerialNode in this._children.items {
			result += '\n' + indent + '\t' + child.toPrettyString(indent + '\t')
		}

		if this._attributes.count == 0 && this._children.length == 0 {
			result += '}'
		} else {
			result += '\n' + indent + '}'
		}

		return result
	}

	public to String {
		return this.toPrettyString("")
	}
}
