import LessThanComparable from "types"

public function min<T implements LessThanComparable<T>>(a: &T, b: &T): &T {
	return (a < b) ? a : b
}

public function max<T implements LessThanComparable<T>>(a: &T, b: &T): &T {
	return (a < b) ? b : a
}

public interface Exponentiable<T> implements EqualComparable<T> {
	function new(withInteger: int): &!Self
	
}

# This function does NOT handle negative powers.
public function power<T implements Exponentiable<T>>(raise num: &T, to pow: &T): &T {
	
}
