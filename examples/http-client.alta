import Client, OutgoingRequest, IncomingResponse, Method, Status, Field from "http"
import Path from "uri"
import printLine, print from "io"
import String from "string"
import Pair, parseNumber from "util"
import Vector from "vector"
import uint16 from "types"

literal function main(argc: int, argv: ptr ptr byte): int {
	let args = new Vector<String>
	for i: int in 0..argc {
		args.push(argv[i])
	}

	if args.length < 2 {
		printLine("Usage: ", args[0], " <address> [port]")
		return 1
	}

	let port: uint16 = 8080

	if args.length > 2
		port = parseNumber<uint16>(args[2])

	let done = false

	let client = new Client((res: IncomingResponse) => void {
		printLine("Server responded with status code ", res.status)

		print("With headers = [")
		let isFirst = true
		for header: Pair<Field, String> in res.headers.items {
			if isFirst {
				printLine()
				isFirst = false
			}
			printLine('\t', header.first, " = ", header.second)
		}
		printLine(']')

		while true {
			let maybeData = res.receive()
			if maybeData {
				# a chunk with zero length indicates the server is done
				# TODO: move this check into the HTTP package logic to make it easier for users
				#       and also make it smarter (e.g. instead of relying on system behavior
				#       where peers closing their sockets generates a packet with zero length, we
				#       should be checking for Content-Length or, once we support HTTP/1.1, the terminating
				#       chunk in a chunked transfer encoding response)
				if (*maybeData).length == 0 {
					done = true
					break
				}
				print(new String((*maybeData).data, (*maybeData).length))
			}
		}
	})

	client.connect(args[1], port)

	client.request.method = Method.Get
	client.request.path = "/"
	client.request.end()

	while !done
		client.tick()

	return 0
}
