import Server, IncomingRequest, OutgoingResponse, Status, Field, Error as HTTPError from "http"
import Path from "uri"
import printLine, print from "io"
import String from "string"
import Pair from "util"
import Error as NetError from "net"

literal function main(argc: int, argv: ptr ptr byte): int {
	let scheduler = new Scheduler
	let server = new Server(scheduler)

	server.requestHandler = (req: IncomingRequest, res: ref OutgoingResponse) => void {
		printLine("Received a ", req.method, " request for ", req.path)
		print("With headers = [")
		let isFirst = true
		for header: Pair<Field, String> in req.headers.items {
			if isFirst {
				printLine()
				isFirst = false
			}
			printLine('\t', header.first, " = ", header.second)
		}
		printLine(']')

		if req.path == "/" || req.path == "/index.html" {
			res.status = Status.OK
			res.headers["Content-Length"] = "3"
			res.end("Hi!")
			return;
		}

		res.status = Status.NotFound
		res.headers["Content-Length"] = "9"
		res.end("Not found")
	}

	if (let res = server.listen(port: 8080)).isError {
		let errName = @reverse NetError[res.error]
		if errName {
			printLine("Failed to listen on port 8080: ", *errName)
		} else {
			printLine("Failed to listen on port 8080: ", res.error)
		}
		return 1
	}
	printLine("Now listening on port 8080...")

	let co = server.run()
	scheduler.schedule(co)
	scheduler.finishAll()

	return 0
}
