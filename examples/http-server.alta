import Server, IncomingRequest, OutgoingResponse, Status, Field from "http"
import Path from "uri"
import printLine, print from "io"
import String from "string"
import Pair from "util"

literal function main(argc: int, argv: ptr ptr byte): int {
	let server = new Server

	server.requestHandler = (req: IncomingRequest, res: ref OutgoingResponse) => void {
		printLine("Received a ", req.method, " request for ", req.path)
		print("With headers = [")
		let isFirst = true
		for header: Pair<Field, String> in req.headers.items {
			if isFirst {
				printLine()
				isFirst = false
			}
			printLine('\t', header.first, " = ", header.second)
		}
		printLine(']')

		if req.path == "/" || req.path == "/index.html" {
			res.status = Status.OK
			res.headers["Content-Length"] = "3"
			res.end("Hi!")
			return;
		}

		res.status = Status.NotFound
		res.headers["Content-Length"] = "9"
		res.end("Not found")
	}

	server.listen(port: 8080)
	printLine("Now listening on port 8080...")

	# this is temporary
	# in the future, when Alta gets coroutines, we can just wait for all coroutines to exit
	# (which is much more versatile than waiting specifically for the server
	# and would allow us to schedule more tasks to run in between server ticks)
	while true
		server.tick()

	return 0
}
