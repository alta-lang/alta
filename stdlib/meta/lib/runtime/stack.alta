import "native.alta" as Native
import Object from "./objects"
import Size from "types"
import IndexOutOfBounds from "exceptions"

export class ObjectStack {
  private var handle: ptr Native._Alta_object_stack = nullptr

  public @from constructor(handle: ptr Native._Alta_object_stack) {
    this.handle = handle
  }

  public to ptr Native._Alta_object_stack {
    return this.handle
  }

  public function initialize(): ref ObjectStack {
    Native._Alta_object_stack_init(this.handle)
    return this
  }
  public function deinitialize(): ref ObjectStack {
    Native._Alta_object_stack_deinit(this.handle)
    return this
  }

  public function push(object: Object): ref ObjectStack {
    Native._Alta_object_stack_push(this.handle, object)
    return this
  }
  public function pop(): Object {
    let obj = this.top
    Native._Alta_object_stack_pop(this.handle)
    return obj
  }

  public function cherryPick(object: Object): bool {
    return Native._Alta_object_stack_cherry_pick(this.handle, object)
  }

  public function unwind(position: Size): ref ObjectStack {
    Native._Alta_object_stack_unwind(this.handle, position, true)
    return this
  }
  public function pop(count: Size): ref ObjectStack {
    Native._Alta_object_stack_unwind(this.handle, count, false)
    return this
  }

  public @read function top(): Object {
    return this.handle.nodeList.object as ptr Native._Alta_object
  }

  public @read function length(): Size {
    return this.handle.nodeCount
  }

  public this[Size]: Object {
    if $ >= this.handle.nodeCount
      throw new IndexOutOfBounds
    let idx: Size = this.handle.nodeCount - $ + 1
    let ptr: ptr Native._Alta_object_stack_node = this.handle.nodeList
    for i: Size in 0..idx {
      ptr = ptr.prev
    }
    return ptr.object as ptr Native._Alta_object
  }

  public this[Object]: Size? {
    let i: Size = 0
    let ptr: ptr Native._Alta_object_stack_node = this.handle.nodeList
    while ptr != nullptr {
      if ptr.object == ($ as ptr Native._Alta_object) as ptr void
        return this.handle.nodeCount - i - 1
      ptr = ptr.prev
    }
    return null
  }
}
