import "../native.alta" as Native
import Size from "types"
import WeakArray from "util"
import Object from "objects.alta"

export class CopyArray extends WeakArray<ptr Native._Alta_object> {
  public constructor(data: ptr ptr Native._Alta_object, size: Size) {
    super(data, size)
  }

  public this[Size]: Object {
    return super[$]
  }
}

export class Captures {
  private var handle: ptr Native._Alta_lambda_state = nullptr

  public @from constructor(handle: ptr Native._Alta_lambda_state) {
    this.handle = handle
  }

  public to ptr Native._Alta_lambda_state {
    return this.handle
  }

  public @read function referenceCount(): ref Size {
    return *this.handle.referenceCount
  }

  public @read function copied(): CopyArray {
    return new CopyArray(this.handle.copies, this.handle.copyCount)
  }

  public @read function referenced(): WeakArray<ptr void> {
    return return new WeakArray<ptr void>(this.handle.references, this.handle.referenceBlockCount)
  }

  public function release(): ref Captures {
    Native._Alta_release_state(this.handle)
    return this
  }
}

export class Function extends Object {
  private @read function handle(): ptr Native._Alta_basic_function {
    return super.handle as ptr Native._Alta_basic_function
  }

  public @from constructor(handle: ptr Native._Alta_basic_function) {
    super(handle as ptr Native._Alta_object)
  }
  public @from constructor(object: Object) {
    super(object)
  }

  public to ptr Native._Alta_basic_function {
    return this.handle
  }

  public @read function captures(): Captures {
    return this.handle.state
  }

  public @read function plain(): ref ptr void {
    return this.handle.plain
  }

  public @read function lambda(): ref ptr void {
    return this.handle.lambda
  }

  public @read function proxy(): ref ptr void {
    return this.handle.proxy
  }
}
