import "native.alta" as Native
import Size, rawconststring from "types"
import jmp_buf from "libc/lib/setjmp"
import IndexOutOfBounds from "exceptions"

export class State {
  private var handle: ptr Native._Alta_runtime_state = nullptr

  public @from constructor(handle: ptr Native._Alta_runtime_state) {
    this.handle = handle
  }

  public to ptr Native._Alta_runtime_state {
    return this.handle
  }

  public @read function localCount(): ref Size {
    return this.handle.localIndex
  }
}

export class ErrorHandler {
  private var handle: ptr _Alta_error_handler_node = nullptr

  public @from constructor(handle: ptr Native._Alta_error_handler_node) {
    this.handle = handle
  }

  public to ptr Native._Alta_error_handler_node {
    return this.handle
  }

  public @read function typeHandled(): ref rawconststring {
    return this.handle.typeName
  }

  public @read function jumpPoint(): ref jmp_buf {
    return this.handle.jumpPoint
  }

  public @read function state(): State {
    return this.handle.state
  }
}

export class ErrorContainer {
  private var handle: ptr _Alta_error_container = nullptr

  public @from constructor(handle: ptr Native._Alta_error_container) {
    this.handle = handle
  }

  public to ptr Native._Alta_error_container {
    return this.handle
  }

  public @read function errorValueIsNative(): ref bool {
    return this.handle.isNative
  }

  public @read function errorTypeName(): ref rawconststring {
    return this.handle.typeName
  }

  public @read function errorValue(): ref ptr void {
    return this.handle.value
  }

  public @read function length(): ref Size {
    return this.handle.handlerStackSize
  }

  public @read function top(): ErrorHandler {
    return this.handle.handlerStack
  }

  public this[Size]: ErrorHandler {
    if $ >= this.handle.handlerStackSize
      throw new IndexOutOfBounds
    let ptr = this.handle.handlerStack
    for i: Size in $...0 {
      ptr = ptr.next
    }
    return ptr
  }
}
