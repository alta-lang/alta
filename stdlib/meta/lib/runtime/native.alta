import ptrdiff_t from "libc/lib/stddef"
import Size from "types"
import jmp_buf from "libc/lib/setjmp"

export enum ObjectType: int {
  Class,
  Union,
  Optional,
  Wrapper,
  Function,
}

export literal @external @typed struct _Alta_object {
  objectType: ObjectType;
}

#
# @section class
#
export literal @external struct __Alta_basic_class {}

export type ClassDestructor = (ptr __Alta_basic_class, bool) -> void

export literal @external @typed struct _Alta_class_info {
  typeName: ptr const byte;
  destroyed: bool;
  persistent: bool;
  destructor: ClassDestructor;
  isBaseStruct: bool;
  parentTypeName: ptr const byte;
  realOffset: ptrdiff_t;
  nextOffset: ptrdiff_t;
  baseOffset: Size;
  parentOffset: Size;
  isCaptureClass: bool;
}

export literal @external @typed struct _Alta_basic_class {
  objectType: ObjectType;
  _Alta_class_info_struct: _Alta_class_info;
}
#
# @end section
#

#
# @section optional
#
export literal @external @typed struct _Alta_basic_optional {
  objectType: ObjectType;
  present: bool;
  destructor: (ptr _Alta_basic_optional) -> void;
}

export type OptionalDestructor = (ptr _Alta_basic_optional) -> void
#
# @end section
#

#
# @section union
#
export literal @external @typed struct _Alta_basic_union {
  objectType: ObjectType;
  typeName: ptr byte;
  destructor: (ptr _Alta_basic_union) -> void;
}

export type UnionDestructor = (ptr _Alta_basic_union) -> void
#
# @end section
#

#
# @section wrapper
#
export literal @external @typed struct _Alta_wrapper {
  objectType: ObjectType;
  value: ptr void;
  destructor: (ptr _Alta_wrapper) -> void;
}

export type WrapperDestructor = (ptr _Alta_wrapper) -> void
#
# @end section
#

#
# @section lambda & capture class
#
export literal @external @typed struct _Alta_lambda_state {
  referenceCount: ptr Size;
  copyCount: Size;
  referenceBlockCount: Size;
  copies: ptr ptr _Alta_object;
  references: ptr ptr void;
}

export type BasicPlainFunction = () -> void
export type BasicLambdaFunction = (_Alta_lambda_state) -> void

export literal @external @typed struct _Alta_basic_function {
  objectType: ObjectType;
  state: _Alta_lambda_state;
  plain: ptr void;
  lambda: ptr void;
  proxy: ptr void;
}

export literal @external @typed struct _Alta_basic_capture_class {
  objectType: ObjectType;
  _Alta_class_info_struct: _Alta_class_info;
  _Alta_capture_class_state: _Alta_lambda_state;
}
#
# @end section
#

#
# @section object stack
#
export literal @external @typed struct _Alta_object_stack_node {
  object: ptr void;
  prev: ptr _Alta_object_stack_node;
}

export literal @external @typed struct _Alta_object_stack {
  nodeList: ptr _Alta_object_stack_node;
  nodeCount: Size;
}
#
# @end section
#

#
# @section misc
#
export literal @external @typed struct _Alta_runtime_state {
  localIndex: Size;
}

export literal @external @typed struct _Alta_function_table {
  count: Size;
  keys: ptr ptr const byte;
  entries: ptr ptr void;
}
#
# @end section
#

#
# @section symbol table
#
export literal @external @typed struct _Alta_symbol_info {
  friendlyName: ptr const byte;
  fullAltaName: ptr const byte;
}

export literal @external @typed struct _Alta_symbol_table {
  count: Size;
  symbols: ptr ptr const byte;
  infos: ptr _Alta_symbol_info;
}
#
# @end section
#

#
# @section generators and coroutines
#
export literal @external @typed struct _Alta_basic_generator_state {
  stack: ptr void;
  stackSize: Size;
  input: ptr void;
  index: Size;
  done: bool;
  parameters: ptr void;
  self: ptr _Alta_basic_class;
}

export literal @external @typed struct _Alta_basic_coroutine_state {
  stack: ptr void;
  stackSize: Size;
  input: ptr void;
  index: Size;
  done: bool;
  parameters: ptr void;
  self: ptr _Alta_basic_class;
  waitingFor: ptr _Alta_basic_coroutine_state;
  next: (ptr _Alta_basic_coroutine_state) -> void;
}

export type _Alta_basic_coroutine_runner = (ptr _Alta_basic_coroutine_state) -> void
#
# @end section
#

#
# @section errors
#
export literal @external @typed struct _Alta_error_handler_node {
  typeName: ptr const byte;
  jumpPoint: jmp_buf;
  state: _Alta_runtime_state;
  next: ptr _Alta_error_handler_node;
}

export literal @external @typed struct _Alta_error_container {
  isNative: bool;
  typeName: ptr const byte;
  value: ptr void;
  handlerStack: ptr _Alta_error_handler_node;
  handlerStackSize: Size;
}
#
# @end section
#

#
# @section global runtime
#
export literal @external @typed struct _Alta_global_runtime_type {
  inited: bool;
  local: _Alta_object_stack;
  lastError: _Alta_error_container;
  functionTable: _Alta_function_table;
  symbolTable: _Alta_symbol_table;
}

declare export literal var _Alta_global_runtime: _Alta_global_runtime_type
#
# @end section
#

#
# @section runtime functions
#
declare export literal function _Alta_init_global_runtime(): void
declare export literal function _Alta_unwind_global_runtime(): void

declare export literal function _Alta_object_stack_init(stack: ptr _Alta_object_stack): void
declare export literal function _Alta_object_stack_deinit(stack: ptr _Alta_object_stack): void
declare export literal function _Alta_object_stack_push(stack: ptr _Alta_object_stack, object: ptr _Alta_object): void
declare export literal function _Alta_object_stack_pop(stack: ptr _Alta_object_stack): void
declare export literal function _Alta_object_stack_cherry_pick(stack: ptr _Alta_object_stack, object: ptr _Alta_object): bool
declare export literal function _Alta_object_stack_unwind(stack: ptr _Alta_object_stack, count: Size, isPosition: bool): void
declare export literal function _Alta_object_destroy(object: ptr _Alta_object): void

declare export literal function _Alta_release_state(state: ptr _Alta_lambda_state): void
declare export literal function _Alta_release_capture_class_state_cache(wrapper: ptr _Alta_wrapper): void

declare export literal function _Alta_common_dtor(klass: ptr _Alta_basic_class, isPersistent: bool): void

declare export literal function _Alta_get_child(klass: ptr _Alta_basic_class, count: Size, @CTranspiler.vararg path: ptr byte...): ptr _Alta_basic_class
declare export literal function _Alta_get_real_version(klass: ptr _Alta_basic_class): ptr _Alta_basic_class
declare export literal function _Alta_get_root_instance(klass: ptr _Alta_basic_class): ptr _Alta_basic_class

declare export literal function _Alta_reset_error(index: Size): void
declare export literal function _Alta_push_error_handler(type: ptr const byte): ptr jmp_buf
declare export literal function _Alta_pop_error_handler(): Size

declare export literal function _Alta_save_state(): _Alta_runtime_state
declare export literal function _Alta_restore_state(state: const _Alta_runtime_state): void

declare export literal function _Alta_uncaught_error(typeName: ptr const byte): void
declare export literal function _Alta_bad_cast(from: ptr const byte, to: ptr const byte): void

declare export literal function _Alta_lookup_virtual_function(className: ptr const byte, signature: ptr const byte): ptr void
declare export literal function _Alta_register_virtual_function(classNameAndSignature: ptr const byte, functionPointer: ptr void): void

declare export literal function _Alta_invalid_return_value(): void

declare export literal function _Alta_register_symbol(symbol: ptr const byte, info: _Alta_symbol_info): void
declare export literal function _Alta_find_info_for_symbol(symbol: ptr const byte): ptr _Alta_symbol_info
declare export literal function _Alta_symbol_to_full_Alta_name(symbol: ptr const byte): ptr const byte
#
# @end section
#
