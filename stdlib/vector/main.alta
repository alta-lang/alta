import malloc, free, realloc from "memory"
import Size from "types"

export generic class Vector<T> {
  private var _data: ptr T = (0 as ptr T)
  private var _length: Size = 0
  private var _size: Size = 0

  public constructor() {
    this._data = malloc(0) as ptr T
  }
  public constructor(length: Size) {
    this._size = length
    this._length = this._size
    this._data = malloc(length * sizeof T) as ptr T
  }

  public @read function length(): Size {
    return this._length
  }

  public @read function data(): ptr T {
    return this._data
  }

  public function get(index: Size): ref T {
    return this._data[index]
  }

  private function ensureSize(desiredSize: Size): void {
    if this._size < desiredSize {
      let tmp = realloc(this._data as ptr void, desiredSize * sizeof T) as ptr T

      if tmp == 0 {
        # welp, something happened
        # TODO: throw an error
        return
      }

      this._data = tmp
      this._size = desiredSize
    }
  }

  public function push(): ref T {
    this.ensureSize(this._length + 1)
    this._length = this._length + 1
    return this._data[this._length - 1]
  }
  public function push(value: T): ref T {
    let elm: ref T = this.push()
    elm = value
    return elm
  }
}
