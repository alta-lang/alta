import allocate, free, reallocate from "memory"
import Size from "types"
import Exception, IndexOutOfBounds from "exceptions"

export class ResizeFailure extends Exception {}

export generic class Vector<T> {
  private var _data: ptr T = nullptr
  private var _length: Size = 0
  private var _size: Size = 0

  public constructor() {
    this._data = allocate<T>(0)
  }
  public constructor(length: Size) {
    this._size = length
    this._data = allocate<T>(length)
  }
  public constructor(length: Size, initializer: T) {
    this._size = this._length = length
    this._data = allocate<T>(length)

    for i: Size in 0..this._length {
      this._data[i] @strict = initializer
    }
  }
  public constructor(items: T...) {
    this._size = this._length = items.length
    this._data = allocate<T>(this._length)

    for i: Size in 0..this._length {
      this._data[i] @strict = items[i]
    }
  }
  public constructor(pointer: ptr T, length: Size) {
    this._size = this._length = length
    this._data = allocate<T>(this._length)

    for i: Size in 0..length {
      this._data[i] @strict = pointer[i]
    }
  }
  public @copy constructor(other: ref Vector<T>) {
    this._size = other._size
    this._length = other._length
    this._data = allocate<T>(other._size)

    for i: Size in 0..this._length {
      this._data[i] @strict = other._data[i]
    }
  }

  public destructor() {
    free<T>(this._data)
  }

  public @read function length(): Size {
    return this._length
  }

  public @read function data(): ptr T {
    return this._data
  }

  public @read function first(): ref T {
    if this.length < 1
      throw new IndexOutOfBounds
    return this._data[0]
  }

  public @read function last(): ref T {
    if this.length < 1
      throw new IndexOutOfBounds
    return this._data[this._length - 1]
  }

  public to ptr T {
    return this._data
  }

  public function get(index: Size): ref T {
    if index >= this._length
      throw new IndexOutOfBounds
    return this._data[index]
  }

  private function ensureSize(desiredSize: Size): void {
    if this._size < desiredSize {
      let tmp = reallocate<T>(this._data, this._size, desiredSize)

      if tmp == 0 {
        throw new ResizeFailure
      }

      this._data = tmp
      this._size = desiredSize
    }
  }

  public function push(): ref T {
    this.ensureSize(++this._length)
    # TODO: default construct a `T` value
    return this.last
  }
  public function push(value: T): ref T {
    let elm: ref T = this.push()
    this._data[this._length - 1] @strict = value
    return elm
  }

  public function pop(): T {
    let value: T = this.last
    delete this.last
    ;--this._length
    return value
  }

  public function unshift(): ref T {
    this.ensureSize(++this._length)
    # TODO: default construct a `T` value
    for i: Size in 0..this._length - 1 {
      this._data[i + 1] = this._data[i]
    }
    return this.first
  }
  public function unshift(value: T): ref T {
    let elm: ref T = this.unshift()
    this._data[0] @strict = value
    return elm
  }

  public function shift(): T {
    let value: T = this.first
    delete this.first
    ;--this._length
    for i: Size in 0..this._length {
      this._data[i] @strict = this._data[i + 1]
    }
    return value
  }

  public function remove(index: Size): T {
    let value: T = this[index]
    for i: Size in index..this._length - 1 {
      this._data[index] = this._data[index + 1]
    }
    delete this[this._length - 1]
    --this._length
    return value
  }

  public function from(index: Size): Vector<T> {
    let other = new Vector<T>(this._length - index)
    for i: Size in 0..other._length {
      other._data[i] @strict = this._data[i + index]
    }
    return other
  }

  public function to(index: Size): Vector<T> {
    let other = new Vector<T>(index + 1)
    for i: Size in 0..other._length {
      other._data[i] @strict = this._data[i]
    }
    return other
  }

  public function replace(index: Size, length: Size, source: ptr T): void {
    for i: Size in 0..length {
      this._data[i + index] = source[i]
    }
  }
  public function replace(index: Size, length: Size, source: Vector<T>): void {
    return this.replace(index, source.length, source as ptr T)
  }
  public function replace(index: Size, source: Vector<T>): void {
    return this.replace(index, source.length, source)
  }

  public function clear(): void {
    # we don't just use `pop` in order to avoid
    # the (usually small) cost of copying the values
    # when it copies them
    for i: Size in this._length..0 {
      delete this._data[i - 1]
    }
    this._length = 0
  }

  public this += Vector<T>: ref Vector<T> {
    for item: ref T in $.items {
      this.push(item)
    }
    return this
  }

  public this + Vector<T>: Vector<T> {
    let copy: Vector<T> = this
    return copy += $
  }

  public this[Size]: ref T {
    return this.get($)
  }

  public @read generator function items(): ref T {
    if this._length == 0
      return;
    if this._length == 1
      return this._data[0]
    for i: Size in 0..this._length - 1 {
      yield this._data[i]
    }
    return this._data[this._length - 1]
  }
}
