import allocate, reallocate, free from "memory"
import Size, rawstring, rawconststring, uint32, uint8, SizeMaximum from "types"
import printf from "libc/lib/stdio"
import strlen from "libc/lib/string"
import tolower from "libc/lib/ctype"
import "unicode" as unicode
import Vector from "vector"

##define STRING_DEBUG false

##if STRING_DEBUG
let stringUUID: Size = 0
##end if

# Determines the length of a null-terminated rawstring
#
# @param str The string whose length will be calculated
# @returns The length of the rawstring, excluding the null-terminator
export function rawstringLength(str: rawconststring): Size {
  let i: Size = 0
  while str[i] != '\0' {
    ++i
  }
  return i
}

export function rawstringsEqual(str1: rawconststring, str2: rawconststring): bool {
  let i: Size = 0
  while str1[i] != '\0' && str2[i] != '\0' {
    if str1[i] != str2[i]
      return false
    ;++i
  }
  if str1[i] != '\0' || str2[i] != '\0'
    return false
  return true
}

export class CodePoint {
  # we have to store references to the String *members* instead of
  # the `String` instance directly because Alta doesn't auto-declare
  # classes yet, so at this point, `String` does not exist
  private var data: (ref rawstring)? = null
  private var length: (ref Size)? = null
  private var _index: Size? = null
  private var selfData: rawstring = nullptr
  private var dataLength: Size = 0

  public @from constructor(data: uint32) {
    let bytes = unicode.utf32ToUTF8(data)
    this.selfData = *allocate<byte>(this.dataLength = bytes.length)
    for i: Size in 0..bytes.length {
      this.selfData[i] = bytes[i]
    }
  }
  public @from constructor(data: byte) {
    this.selfData = *allocate<byte>(this.dataLength = 1)
    this.selfData[0] = data
  }
  module constructor(data: ref rawstring, length: ref Size, index: Size) {
    this.data = data
    this.length = length
    this._index = index
  }
  public @copy constructor(other: ref CodePoint) {
    if other.data {
      this.selfData = *allocate<byte>(this.dataLength = other.byteLength)
      let offset = other.byteIndex
      for i: Size in 0..this.dataLength {
        this.selfData[i] = other.bytes[offset + i]
      }
    } else {
      this.selfData = *allocate<byte>(this.dataLength = other.dataLength)
      for i: Size in 0..this.dataLength {
        this.selfData[i] = other.selfData[i]
      }
    }
  }

  public destructor() {
    if this.selfData {
      free<byte>(this.selfData)
    }
  }

  private function findByteIndex(): Size {
    let i: Size = 0
    for strIdx: Size in 0..(*this._index) {
      let bytes = unicode.detectRequiredUTF8Bytes((*this.data)[i])
      i += bytes
    }
    return i
  }

  private function resize(idx: Size, needed: Size): void {
    let current = unicode.detectRequiredUTF8Bytes((*this.data)[idx])

    if needed < current {
      let diff = current - needed
      for i: Size in idx + current..(*this.length) {
        (*this.data)[i - diff] = (*this.data)[i]
      }
      ;(*this.data) = *reallocate<byte>(*this.data, *this.length, *this.length - diff)
      ;(*this.length) -= diff
    } else if needed > current {
      let diff = needed - current
      ;(*this.data) = *reallocate<byte>(*this.data, *this.length, *this.length + diff)
      for i: Size in (*this.length) + diff - 1:::idx + current {
        ;(*this.data)[i] = (*this.data)[i - diff]
      }
      ;(*this.length) += diff
    }
  }

  public this = uint32: ref CodePoint {
    let bytes = unicode.utf32ToUTF8($)

    if this.data {
      let idx = this.findByteIndex()

      this.resize(idx, bytes.length)

      for i: Size in 0..bytes.length {
        ;(*this.data)[idx + i] = bytes[i]
      }
    } else {
      this.dataLength = bytes.length
      for i: Size in 0..this.dataLength {
        this.selfData[i] = bytes[i]
      }
    }

    return this
  }

  public this = rawconststring: ref CodePoint {
    let strLen = rawstringLength($)

    assert strLen != 0

    let required = unicode.detectRequiredUTF8Bytes($[0])

    assert strLen >= required

    if this.data {
      let idx = this.findByteIndex()

      this.resize(idx, required)

      for i: Size in 0..strLen {
        ;(*this.data)[idx + i] = $[i]
      }
    } else {
      this.dataLength = strLen
      for i: Size in 0..strLen {
        this.selfData[i] = $[i]
      }
    }
    

    return this
  }

  public to uint32 {
    let idx: Size = 0
    let required: Size = 0
    if this.data {
      idx = this.findByteIndex()
      required = unicode.detectRequiredUTF8Bytes((*this.data)[idx])
    } else {
      required = this.dataLength
    }

    let vec = new Vector<uint8>(required)

    for i: Size in 0..required {
      vec.push(!this.data ? this.selfData[i] : (*this.data)[idx + i])
    }

    return unicode.utf8ToUTF32(vec)
  }

  public to byte {
    if !this.data {
      assert this.dataLength == 1
      return this.selfData[0]
    }

    let idx = this.findByteIndex()
    let required = unicode.detectRequiredUTF8Bytes((*this.data)[idx])

    assert required == 1

    return (*this.data)[idx]
  }

  public @read function index(): Size {
    return !this.data ? 0 : (*this._index)
  }

  public @read function byteIndex(): Size {
    return !this.data ? 0 : this.findByteIndex()
  }

  public @read function byteLength(): Size {
    return !this.data ? this.dataLength : unicode.detectRequiredUTF8Bytes((*this.data)[this.findByteIndex()])
  }

  public @read function bytes(): rawconststring {
    return !this.data ? this.selfData : (*this.data)
  }

  public this == CodePoint: bool {
    if this.byteLength != $.byteLength
      return false

    let thisByteIndex = this.byteIndex
    let thatByteIndex = $.byteIndex

    for i: Size in 0..this.byteLength {
      if this.bytes[thisByteIndex + i] != $.bytes[thatByteIndex + i]
        return false
    }

    return true
  }
  public CodePoint == this: bool {
    return $ == this
  }
  public this == byte: bool {
    return this == new CodePoint($)
  }
  public byte == this: bool {
    return new CodePoint($) == this
  }

  # TODO: automatically create operator methods when corresponding operator methods are provided
  #       e.g. automatically create `!=` if `==` is provided
  public this != CodePoint: bool {
    return !(this == $)
  }
  # TODO: create an attribute for automatic operator creation: `@reflexive`
  #       it would be used to tell the compiler that doing `this == foo` is the same as doing `foo == this`
  #       (which is true in most but not all cases, so the compiler can't assume it is)
  public CodePoint != this: bool {
    return $ != this
  }
  public this != byte: bool {
    return !(this == $)
  }
  public byte != this: bool {
    return this != $
  }

  public this > CodePoint: bool {
    return this as uint32 > $ as uint32
  }
  public CodePoint > this: bool {
    return $ > this
  }
  public this > byte: bool {
    return this as uint32 > $ as uint32
  }
  public byte > this: bool {
    return $ as uint32 > this as uint32
  }

  public this < CodePoint: bool {
    return this as uint32 < $ as uint32
  }
  public CodePoint < this: bool {
    return $ > this
  }
  public this < byte: bool {
    return this as uint32 < $ as uint32
  }
  public byte < this: bool {
    return $ as uint32 < this as uint32
  }

  public this <= CodePoint: bool {
    return !(this > $)
  }
  public CodePoint <= this: bool {
    return $ <= this
  }
  public this <= byte: bool {
    return this as uint32 <= $ as uint32
  }
  public byte <= this: bool {
    return $ as uint32 <= this as uint32
  }

  public this >= CodePoint: bool {
    return !(this < $)
  }
  public CodePoint >= this: bool {
    return $ >= this
  }
  public this >= byte: bool {
    return this as uint32 >= $ as uint32
  }
  public byte >= this: bool {
    return $ as uint32 >= this as uint32
  }
}

# A basic, UTF8 string container
export class String {
  private var _data: rawstring = 0
  private var _length: Size = 0

##if STRING_DEBUG
  private var uuid = stringUUID++
##end if

  # Constructs a new, empty String
  public constructor() {
    this._data = *allocate<byte>(1)
    this._data[0] = '\0'

##if STRING_DEBUG
    printf("constructed a new String (%llu)\n", this.uuid)
##end if
  }

  # Constructs a new String given a rawstring (ptr byte)
  #
  # @param data The rawstring to us
  # @note The length will be determined automatically
  #       using `rawstringLength(data)`
  public @from constructor(data: rawconststring) {
    this._length = rawstringLength(data)
    this._data = *allocate<byte>(this._length + 1)

    for i: Size in 0..this._length {
      this._data[i] = data[i]
    }

    this._data[this._length] = '\0'

##if STRING_DEBUG
    printf("constructed a new String (%llu)\n", this.uuid)
##end if
  }

  # Constructs a new String given a rawstring (ptr byte) and a length
  #
  # @param data   The rawstring to use
  # @param length The length of the rawstring, *excluding* the null
  #               terminator (i.e. length of "hi" equals 2, not 3)
  public constructor(data: rawconststring, length: Size) {
    this._length = length
    this._data = *allocate<byte>(this._length + 1)

    for i: Size in 0..this._length {
      this._data[i] = data[i]
    }

    this._data[this._length] = '\0'

##if STRING_DEBUG
    printf("constructed a new String (%llu)\n", this.uuid)
##end if
  }

  # Constructs a new String given an unsigned byte array (ptr const uint8) and a length
  #
  # @param data   The unsigned byte array to use
  # @param length The length of the unsigned byte array
  #
  # @note This is a convenience constructor provided for creating Strings from unsigned byte array,
  #       commonly used in applications such as network communication. It is the same as creating a
  #       string from a rawstring, but it eliminates the need to manually cast the pointer.
  public constructor(data: ptr const uint8, length: Size) {
    this._length = length
    this._data = *allocate<byte>(this._length + 1)

    for i: Size in 0..this._length {
      this._data[i] = data[i] as byte
    }

    this._data[this._length] = '\0'

##if STRING_DEBUG
    printf("constructed a new String (%llu)\n", this.uuid)
##end if
  }

  public constructor(length: Size) {
    this._length = length
    this._data = *allocate<byte>(this._length + 1)

    for i: Size in 0...this._length {
      this._data[i] = '\0'
    }

##if STRING_DEBUG
    printf("constructed a new String (%llu)\n", this.uuid)
##end if
  }

  public @from constructor(data: ref CodePoint) {
    this._length = data.byteLength
    this._data = *allocate<byte>(this._length + 1)

    let thatByteIndex = data.byteIndex

    for i: Size in 0..this._length {
      this._data[i] = data.bytes[thatByteIndex + i]
    }

    this._data[this._length] = '\0'

##if STRING_DEBUG
    printf("constructed a new String (%llu)\n", this.uuid)
##end if
  }

  # Constructs a new String by copying another String
  #
  # @param other The String to copy
  public @copy constructor(other: ref String) {
    this._length = other._length
    this._data = *allocate<byte>(this._length + 1)

    for i: Size in 0..this._length {
      this._data[i] = other._data[i]
    }

    this._data[this._length] = '\0'

##if STRING_DEBUG
    printf("copied a String (%llu -> %llu)\n", other.uuid, this.uuid)
##end if
  }

  public destructor() {
##if STRING_DEBUG
    printf("destroying a String (%llu)...\n", this.uuid)
##end if

    free<byte>(this._data)

##if STRING_DEBUG
    printf("destroyed a String (%llu)\n", this.uuid)
##end if
  }

  # Retrieves the character at the given index and returns a CodePoint
  #
  # @param i The index of the character to retrieve
  # @returns A CodePoint for the code point at the given index
  public function charAt(i: Size): CodePoint? {
    if i >= this.length {
      return null
    }
    return new CodePoint(this._data, this._length, i)
  }

  public function byteAt(i: Size): (ref byte)? {
    if i >= this._length {
      return null
    }

    return this._data[i]
  }

  # The pointer to the rawstring (ptr byte) contained
  # by this String
  public @read function data(): rawstring {
    return this._data
  }

  # The length of this String
  #
  # Note that this does *not* include the null terminator
  # i.e. the *length* of "hi" is 2, not 3
  public @read function length(): Size {
    let len: Size = this._length
    for i: Size in 0..this._length {
      let bytes = unicode.detectRequiredUTF8Bytes(this.data[i])
      len -= bytes - 1
      i += bytes - 1
    }
    return len
  }

  public @read function byteLength(): Size {
    return this._length
  }

  # The size of this String
  #
  # Note that this *does* include the null terminator
  # i.e. the *size* of "hi" is 3, not 2
  public @read function size(): Size {
    return this.length + 1
  }

  # Whether this String is empty
  #
  # This is exactly equivalent to checking if the length of the String is 0
  public @read function empty(): bool {
    return this._length == 0
  }

  public to rawstring {
    return this._data
  }

  private function resize(length: Size): ref String {
    let maybe = reallocate<byte>(this._data, this._length, length + 1)
    assert maybe

    this._data = *maybe as rawstring
    this._length = length
    
    return this
  }

  # Appends the given rawstring to this String
  #
  # @param data The string to append
  # @param length The length of the string to append
  # @returns A reference to this String, to allow call chaining
  public function append(data: rawconststring, length: Size): ref String {
    let oldLen = this._length

    this.resize(this._length + length)

    for i: Size in 0..length {
      this._data[oldLen + i] = data[i]
    }

    this._data[this._length] = '\0'

    return this
  }

  # Appends the given rawstring to this String
  #
  # @param data The string to append
  # @returns A reference to this String, to allow call chaining
  # @note The length will be determined automatically
  #       using `rawstringLength(data)`
  public function append(data: rawconststring): ref String {
    return this.append(data, rawstringLength(data))
  }

  # Appends the given String to this String
  #
  # @param data The String to append
  # @returns A reference to this String, to allow call chaining
  public function append(data: String): ref String {
    return this.append(data._data, data._length)
  }

  public function append(data: byte): ref String {
    return this.append(&data, 1)
  }

  public function append(data: CodePoint): ref String {
    return this.append(data.bytes + data.byteIndex, data.byteLength)
  }

  public function append(data: uint32): ref String {
    let tmp = unicode.utf32ToUTF8(data)
    return this.append(tmp.data as ptr byte, tmp.length)
  }

  public function substring(from: Size, to: Size): String {
    let sub = new String
    for i: Size in from..to {
      if i >= this.length break
      sub.append(*this.charAt(i))
    }
    return sub
  }
  # possible because Alta takes parameters names into account when determining overloads
  # and defaults to the first overload found when ambiguities arise
  public function substring(from: Size, length: Size): String {
    return this.substring(from, to: from + length)
  }
  public function substring(from: Size): String {
    return this.substring(from, to: this.length)
  }
  # possible for the same reason as above
  public function substring(to: Size): String {
    return this.substring(0, to: to)
  }
  public function substring(length: Size): String {
    return this.substring(0, length: length)
  }

  public function prepend(data: rawconststring, length: Size): ref String {
    let oldLen = this._length

    this.resize(this._length + length)

    for i: Size in oldLen::0 {
      this._data[i - 1 + length] = this._data[i - 1]
    }

    for i: Size in 0..length {
      this._data[i] = data[i]
    }

    this._data[this._length] = '\0'

    return this
  }

  public function prepend(data: rawconststring): ref String {
    return this.prepend(data, rawstringLength(data))
  }

  public function prepend(data: String): ref String {
    return this.prepend(data._data, data._length)
  }

  public function prepend(data: byte): ref String {
    return this.prepend(&data, 1)
  }

  public function prepend(data: CodePoint): ref String {
    return this.prepend(data.bytes + data.byteLength, data.byteLength)
  }

  public function prepend(data: uint32): ref String {
    let tmp = unicode.utf32ToUTF8(data)
    return this.prepend(tmp.data as ptr byte, 4)
  }

  public function includes(data: CodePoint | byte...): bool {
    # why not just call indexOf with each of the items?
    # well, because this is a slightly more optimized approach.
    # indexOf loops through all the characters, stopping on the
    # first instance of the desired character. this means we would have
    # to loop through all the characters in the string for each argument
    # that's not present. this method loops through each of the arguments
    # for every character in this string, which means that a character that
    # is present would need to go through fewer characters in this string
    # before being found
    for i: Size in 0..this.length {
      for j: Size in 0..data.length {
        let isCP = data[j] instanceof CodePoint
        if isCP {
          if this[i] == (data[j] as CodePoint)
            return true
        } else {
          if this[i] == (data[j] as byte)
            return true
        }
      }
    }
    return false
  }

  public function includes(test: (CodePoint) => bool): bool {
    return this.indexOf(test) != SizeMaximum
  }

  public function indexOf(data: CodePoint | byte, after: Size = SizeMaximum): Size {
    let isCP = data instanceof CodePoint
    for i: Size in after + 1..this.length {
      # TODO: automatic union method and operator method handling
      # basically, if the target functions are overloaded with methods
      # that can handle all types present in the union, Alta will automatically
      # generate code that knows which to call at runtime
      if isCP {
        if this[i] == (data as CodePoint)
          return i
      } else {
        if this[i] == (data as byte)
          return i
      }
    }
    return SizeMaximum
  }

  # Basically just a direct-expression-of-intent wrapper for code that tests whether
  # a character matches some conditions they set forth
  public function indexOf(test: (CodePoint) => bool, after: Size = SizeMaximum): Size {
    for i: Size in after + 1..this.length {
      if test(this[i])
        return i
    }
    return SizeMaximum
  }

  public function lastIndexOf(data: CodePoint | byte, after: Size = SizeMaximum): Size {
    let idx = this.indexOf(data, after)
    if idx == SizeMaximum
      return SizeMaximum
    while (let next = this.indexOf(data, after: idx)) != SizeMaximum {
      idx = next
    }
    return idx
  }

  public function toLowerCase(): String {
    # the C `tolower` function is locale-dependent; this shouldn't be
    # TODO: make this locale-independent
    let copy = new String(this)
    # we don't access members directly because we want to properly handle UTF-8 characters
    for i: Size in 0..copy.length {
      if copy[i].byteLength == 1
        copy[i] = tolower(copy[i])
    }
    return copy
  }

  public function startsWith(other: String): bool {
    if other.length > this.length
      return false
    return this.substring(length: other.length) == other
  }

  public function endsWith(other: String): bool {
    if other.length > this.length
      return false
    return this.substring(from: this.length - other.length) == other
  }

  public this + String: String {
    let other = new String(this)
    other.append($)
    return other
  }

  public this + CodePoint: String {
    let other = new String(this)
    other.append($)
    return other
  }

  public this + byte: String {
    let other = new String(this)
    other.append($)
    return other
  }

  public this + uint32: String {
    let other = new String(this)
    other.append($)
    return other
  }

  # why have both the `this + String` version AND
  # the `String + this` version? in order to allow
  # `String` to be created from a string literal
  # regardles of which side of this object it is
  # e.g. `"foo" + myString` will properly
  # convert "foo" to a String and append `myString`
  # to it
  public String + this: String {
    # btw, this will not recurse; it calls the
    # lefthand-this version of the `+` operator
    # (Alta always checks for a lefthand-this
    # operator before checking for a righthand-this
    # operator)
    #
    # note for Alta language developers: remember to
    # document this behavior when writing future
    # language documentation
    return $ + this
  }

  public CodePoint + this: String {
    let other = new String(this)
    other.prepend($)
    return other
  }

  public byte + this: String {
    let other = new String(this)
    other.prepend($)
    return other
  }

  public uint32 + this: String {
    let other = new String(this)
    other.prepend($)
    return other
  }

  public this += String: ref String {
    return this.append($)
  }

  public this += CodePoint: ref String {
    return this.append($)
  }

  public this += byte: ref String {
    return this.append($)
  }

  public this += uint32: ref String {
    return this.append($)
  }

  public this ^= String: ref String {
    return this.prepend($)
  }

  public this ^= CodePoint: ref String {
    return this.prepend($)
  }

  public this ^= byte: ref String {
    return this.prepend($)
  }

  public this ^= uint32: ref String {
    return this.prepend($)
  }

  public this[Size]: CodePoint {
    return *this.charAt($)
  }

  public this == String: bool {
    if this.length != $.length
      return false

    for i: Size in 0..this.length {
      if this[i] != $[i]
        return false
    }

    return true
  }

  # TODO: auto-generate complementary operators
  #       when given their counterpart. e.g. automatically
  #       generate `!=` if `==` is provided
  public this != String: bool {
    return !(this == $)
  }

  # same reason for having the righthand-this version
  # of the `+` operator for `String`s. this lets
  # `"foo" == myString` properly convert "foo" to
  # a String and then compare it to `myString`.
  # without this, Alta will:
  #   1. try to find a lefthand-this operator on `ptr const byte`
  #      which fails because it's a native type; and anyways,
  #      this isn't what we want
  #      (`ptr const byte == ptr const byte`)
  #   2. try to find a righthand-this operator on `String`
  #      which fails because none is defined (assuming we're
  #      not creating this method); however, this IS what we want
  #      (`String == String`)
  #   3. try to find a `to` cast from `String` to `ptr const byte`
  #      which it DOES find; unfortunately, this is not what
  #      we want since we would end up comparing pointer addresses
  #      (`ptr const byte == ptr const byte`)
  #   4. try to find a `from` cast from `ptr const byte` to `String`
  #      which it DOES find; this would generate the behavior we want
  #      (`String == String`)
  # it would be fine if #4 happened, but the problem is that #3 is
  # found first (and is the proper behavior), so this method MUST
  # be defined for #2 to be found first and generate proper behavior
  public String == this: bool {
    return $ == this
  }

  # same reason for existing as `String == this`
  public String != this: bool {
    return $ != this
  }

  public to bool {
    return this.length > 0
  }

  public @read generator function items(): CodePoint {
    if this.length == 0
      return;
    if this.length == 1
      return this[0]
    for i: Size in 0..this.length - 1 {
      yield this[i]
    }
    return this[this._length - 1]
  }
}
