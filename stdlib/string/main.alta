import malloc from "memory"

export function rawstringLength(str: ptr byte): unsigned long long int {
  let i: unsigned long long int = 0
  while *(str + i) != 0 {
    i = i + 1
  }
  return i
}

export class String {
  private var _data: ptr byte = 0
  private var _length: unsigned long long int = 0
  public constructor() {
    this._data = malloc(1) as ptr byte
    valueof this._data = 0
  }
  public constructor(data: ptr byte) {
    this._length = rawstringLength(data)
    this._data = malloc(this._length + 1) as ptr byte

    let i: unsigned long long int = 0
    while i < this._length {
      *(this._data + i) = *(data + i)
      i = i + 1
    }

    *(this._data + this._length) = 0
  }

  public function charAt(i: unsigned long long int): ref byte {
    if i > this._length {
      return *(this._data + this._length)
    }
    return *(this._data + i)
  }

  @read public function data(): ptr byte {
    return this._data
  }
  @read public function length(): unsigned long long int {
    return this._length
  }
  @read public function size(): unsigned long long int {
    return this.length + 1
  }
}
