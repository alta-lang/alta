import Vector from "vector"
import Size from "types"
import Pair from "util"

export generic class Map<K, V> {
  private var _keys: Vector<K> = new Vector<K>
  private var _values: Vector<V> = new Vector<V>

  public constructor() {}
  public constructor(keys: Vector<K>, values: Vector<V>) {
    this._keys = keys
    this._values = values
  }
  public constructor(items: Pair<K, V>...) {
    for i: Size in 0..items.length {
      this[items[i].first] = items[i].second
    }
  }

  # Gets a reference to the value associated with the given key
  # @returns a reference to the value
  public function get(key: K): ref V {
    for i: Size in 0..this._keys.length {
      if this._keys[i] == key {
        return this._values.get(i)
      }
    }

    this._keys.push(key)
    return this._values.push()
  }

  # Checks whether a given key exists in this Map
  # @returns `true` if the key is present, `false` otherwise
  public function has(key: K): bool {
    for i: Size in 0..this._keys.length {
      if this._keys[i] == key {
        return true
      }
    }

    return false
  }

  public function getKeys(): Vector<K> {
    return this._keys
  }

  public @read function entries(): Vector<Pair<K, V>> {
    let result = new Vector<Pair<K, V>>

    for i: Size in 0..this._keys.length {
      result.push(new Pair<K, V>(this._keys[i], this._values[i]))
    }

    return result
  }

  public @read function keys(): Vector<K> {
    return this._keys
  }

  public @read function values(): Vector<V> {
    return this._values
  }

  public function clear(): void {
    this._keys.clear()
    this._values.clear()
  }

  public this[K]: ref V {
    return this.get($)
  }

  public @read generator function items(): Pair<K, V> {
    if this._keys.length == 0
      return;
    if this._keys.length == 0
      return new Pair<K, V>(this._keys[0], this._values[0])
    for i: Size in 0..this._keys.length - 1 {
      yield new Pair<K, V>(this._keys[i], this._values[i])
    }
    return new Pair<K, V>(this._keys[this._keys.length - 1], this._values[this._keys.length - 1])
  }
}
