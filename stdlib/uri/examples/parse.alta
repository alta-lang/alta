import String from "string"
import Vector from "vector"
import rawstring, Size from "types"
import printLine, print from "io"
import URI, encode from "../"

literal function main(argc: int, argv: ptr rawstring): int {
  if argc < 2 {
    printLine("i need a uri to parse...")
    return 1
  }

  let uri = new URI(argv[1])

  printLine("Raw URI = ", uri)

  printLine("Scheme = \"", uri.scheme, '"')

  if uri.authority {
    printLine("Raw Authority = \"", *uri.authority, '"')

    printLine("Authority = {")
    if (*uri.authority).userInformation {
      printLine("  Raw User Information = \"", *(*uri.authority).userInformation, '"')
      printLine("  User Information = {")
      printLine("    Username = \"", (*(*uri.authority).userInformation).username, "\" (encoded as \"", encode((*(*uri.authority).userInformation).username), "\")")
      if (*(*uri.authority).userInformation).password {
        printLine("    Password = \"", *(*(*uri.authority).userInformation).password, "\" (encoded as \"", encode(*(*(*uri.authority).userInformation).password), "\")")
      }
      printLine("  }")
    }
    printLine("  Host = \"", (*uri.authority).host, '"')
    if (*uri.authority).port {
      printLine("  Port = ", *(*uri.authority).port)
    }
    printLine("}")
  }

  printLine("Raw Path = \"", uri.path, '"')

  print("Path = [")
  if uri.path.length == 0 {
    printLine("]")
  } else {
    printLine()
    for i: Size in 0..uri.path.length {
      printLine("  \"", uri.path[i], "\" (encoded as \"", encode(uri.path[i]), "\"),")
    }
    printLine("]")
  }

  if uri.query {
    printLine("Raw Query = \"", *uri.query, '"')

    printLine("Query = {")
    for i: Size in 0..(*uri.query).keys.length {
      let key = (*uri.query).keys[i]
      let val = (*uri.query)[key]
      print("  \"", (*uri.query).keys[i], '"')
      if val.length > 0 {
        print(" = ")
        if val.length == 1 {
          printLine('"', val, "\" (encoded as \"", encode(val), "\"),")
        } else {
          printLine('[')
          for j: Size in 0..val.length {
            printLine("    \"", val[j], "\" (encoded as \"", encode(val[j]), "\"),")
          }
          printLine("  ],")
        }
      } else {
        printLine(',')
      }
    }
    printLine("}")
  }

  if uri.fragment {
    printLine("Fragment = \"", *uri.fragment, "\" (encoded as \"", encode(*uri.fragment), "\")")
  }

  return 0
}
