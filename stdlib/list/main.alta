import allocate, free from "memory"
import Size from "types"

generic class Node<T> {
  # TODO: make T a raw member
  #       Alta needs to support constructor-initialization
  #       before this can be done. in its current state, the compiler would
  #       try to default-construct `data` with the `T` type (which might not be
  #       default-constructable) regardless of whether an initializer is present
  #       or if its initialized in the constructor.
  #       the desired behavior is that members that are initialized in the constructor
  #       can simply not be default-constructed
  #
  #       one might argue that you could simply use an optional type
  #       here, making it `T?`, but then you wouldn't be able to get
  #       a reference to the unwrapped value within (although, there's nothing
  #       preventing this from being implemented in the compiler; it's certainly
  #       possible and very useful)
  public var data: ptr T = nullptr
  public var prev: ptr Node<T> = nullptr
  public var next: ptr Node<T> = nullptr

  public constructor(data: T) {
    this.data = allocate<T>(1)
    ;*this.data @strict = data
  }
  public @copy constructor(other: ref Node<T>) {
    this.data = allocate<T>(1)
    ;*this.data @strict = *other.data
  }
  public destructor() {
    delete* this.data
  }
}

# A generic doubly-linked list implementation
export generic class List<T> {
  private var start: ptr Node<T> = nullptr
  private var end: ptr Node<T> = nullptr
  private var count: Size = 0

  public constructor() {}
  public @copy constructor(other: ref List<T>) {
    this.count = other.count
    if other.count == 1 {
      this.end = this.start = &new* Node<T>(*other.start)
    } else if other.count > 1 {
      this.start = &new* Node<T>(*other.start)
      let ptr = this.start
      let otherPtr = other.start.next
      while otherPtr != nullptr {
        let node = &new* Node<T>(*otherPtr)
        node.prev = ptr
        ptr.next = node
        ptr = node
        otherPtr = otherPtr.next
      }
      this.end = ptr
    }
  }
  public destructor() {
    let ptr = this.start
    while ptr != nullptr {
      let tmp = ptr
      ptr = ptr.next
      delete* tmp
    }
  }

  public function pushFront(data: T): ref T {
    let node = &new* Node<T>(data)
    node.next = this.start
    if this.start != nullptr
      this.start.prev = node
    this.start = node
    if this.end == nullptr
      this.end = this.start
    ;++this.count
    return *node.data
  }
  public function pushBack(data: T): ref T {
    let node = &new* Node<T>(data)
    node.prev = this.end
    if this.end != nullptr
      this.end.next = node
    this.end = node
    if this.start == nullptr
      this.start = this.end
    ;++this.count
    return *node.data
  }

  public function popFront(): T {
    let data: T = *this.start.data
    let tmp = this.start
    this.start = this.start.next
    if this.start != nullptr
      this.start.prev = nullptr
    if this.end == tmp
      this.end = nullptr
    delete* tmp
    ;--this.count
    return data
  }
  public function popBack(): T {
    let data: T = *this.end.data
    let tmp = this.end
    this.end = this.end.prev
    if this.end != nullptr
      this.end.next = nullptr
    if this.start == tmp
      this.start = nullptr
    delete* tmp
    ;--this.count
    return data
  }

  public function insert(data: T, at: Size): ref T {
    if at == 0
      return this.pushFront(data)
    if at == this.count
      return this.pushBack(data)

    assert at <= this.count

    let ptr = this.start
    let i: Size = 0
    while ptr != nullptr {
      if i == at {
        let node = &new* Node<T>(data)
        node.prev = ptr.prev
        node.next = ptr
        ptr.prev = node
        ;++this.count
        return *node.data
      }
      ptr = ptr.next
      ;++i
    }
    assert false
  }
  public function remove(index: Size): T {
    if index == 0
      return this.popFront()
    if index == this.count - 1
      return this.popBack()

    assert index < this.count

    let ptr = this.start
    let i: Size = 0
    while ptr != nullptr {
      if i == index {
        let data: T = *ptr.data
        ptr.prev.next = ptr.next
        ptr.next.prev = ptr.prev
        delete* ptr
        ;--this.count
        return data
      }
      ptr = ptr.next
      ;++i
    }
    assert false
  }

  public function clear(): ref List<T> {
    let ptr = this.start
    while ptr != nullptr {
      let next = ptr.next
      delete* ptr
      ptr = next
    }
    this.start = nullptr
    this.end = nullptr
    this.count = 0
    return this
  }

  public @read function first(): ref T {
    assert this.count != 0
    return *this.start.data
  }
  public @read function last(): ref T {
    assert this.count != 0
    return *this.end.data
  }
  public @read function length(): Size {
    return this.count
  }

  public this[Size]: ref T {
    assert $ < this.count

    let ptr = this.start
    let i: Size = 0
    while ptr != nullptr {
      if i == $ {
        return *ptr.data
      }
      ptr = ptr.next
      ;++i
    }
    assert false
  }

  public @read generator function items(): ref T {
    if this.count == 0
      return;
    if this.count == 1
      return *this.start.data
    let ptr = this.start
    for i: Size in 0..this.count - 1 {
      yield *ptr.data
      ptr = ptr.next
    }
    return *ptr.data
  }
}
