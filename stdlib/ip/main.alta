import Vector from "vector"
import uint8, uint16, uint32, Size, SizeMaximum, UInt32ToUInt8, UInt16ToUInt8 from "types"
import Exception from "exceptions"
import parseNumber, numberToString from "util"
import String from "string"

# @brief An invalid address component index was provided
# @desc An exception thrown by Address's subscript operator
#       when the provided subscript index exceeds the maximum
#       for the Address:
#         * 3 (base-0) for IPv4
#         * 7 (base-0) for IPv6
export class InvalidComponentIndex extends Exception {}

# @brief An invalid address string was provided
# @desc An exception thrown by Address's String cast constructor
#       when the provided string is invalid for either IPv4 or IPv6.
#
#       For IPv4:
#         * If less than 3 dots are found
#         * If more than 3 dots are found
#
#       For IPv6:
#         * If less than 8 components are found (and no consecutive shorthand is found)
#         * If multiple consecutive shorthands are found
#         * If more than 8 components are found
export class InvalidAddress extends Exception {}

# @brief An invalid operation was performed on the given address
# @desc An exception thrown when trying to perform an operation
#       on an Address that doesn't support that operation. This
#       usually means you've tried to use an IPv4 Address like
#       an IPv6 one or vice versa (for example, trying to coerce
#       an IPv6 Address to a uint32, something only IPv4 Addresses
#       can do).
export class InvalidAddressType extends Exception {}

export class Address {
  private var _isV6 = false
  private var _components = new Vector<uint16>(6)

  # @brief Constructs an IPv4 `Address` with all components initialized to 0
  public constructor() {
    for i: uint8 in 0..4 {
      this._components.push(0)
    }
  }

  # @brief Constructs an `Address` with all components intialized to 0
  #
  # @param isIPv6 If `true`, the new address will be IPv6. Otherwise, it will be IPv4
  public constructor(isIPv6: bool) {
    for i: uint8 in 0..(isIPv6 ? 8 : 4) {
      this._components.push(0)
    }
  }

  # @brief Constructs an `Address` by parsing the given string as an IPv4 or IPv6 address
  #
  # @param address The string to parse as an address
  public @from constructor(address: String) {
    let found = false
    for i: Size in 0..address.length {
      if address[i] == ':' {
        this._isV6 = true
        break
      }
    }
    for i: uint8 in 0..(this._isV6 ? 8 : 4) {
      this._components.push(0)
    }

    if address.length == 2 && address[0] == ':' && address[1] == ':' {
      # do nothing
    } else if this._isV6 {
      let lastIdx: Size? = SizeMaximum # start with SizeMaximum so it'll wrap around to 0 when we do `from: *lastIdx + 1`
      let doubleIndex: uint8? = null
      let componentIdx: uint8 = 0
      while lastIdx {
        if componentIdx > 7
          throw new InvalidAddress

        let nextIdx = address.indexOf(':', after: *lastIdx)

        let substr = address.substring(from: *lastIdx + 1, to: nextIdx == SizeMaximum ? address.length : nextIdx)

        if substr.length == 0 {
          if doubleIndex
            throw new InvalidAddress
          doubleIndex = componentIdx
          if *lastIdx == SizeMaximum {
            nextIdx = address.indexOf(':', after: nextIdx)
          }
        } else {
          this._components[componentIdx++] = parseNumber<uint16>(substr, 16)
        }

        if nextIdx == SizeMaximum {
          lastIdx = null
        } else {
          lastIdx = nextIdx
        }

        if lastIdx && *lastIdx + 1 >= address.length {
          throw new InvalidAddress
        }
      }
      if !doubleIndex && componentIdx < 8
        throw new InvalidAddress
      if doubleIndex {
        let diff = this._components.length - componentIdx
        for i: uint8 in *doubleIndex..componentIdx {
          this._components[i + diff] = this._components[i]
        }
        for i: uint8 in *doubleIndex..*doubleIndex + diff {
          this._components[i] = 0
        }
      }
    } else {
      let first = address.indexOf('.')
      let second = address.indexOf('.', after: first)
      let third = address.indexOf('.', after: second)

      if first != SizeMaximum && second != SizeMaximum && third != SizeMaximum && address.indexOf('.', after: third) != SizeMaximum {
        throw new InvalidAddress
      }

      if first == SizeMaximum {
        # a (uint32)
        let num: UInt32ToUInt8 = parseNumber<uint32>(address)
        this._components[0] = num.part4
        this._components[1] = num.part3
        this._components[2] = num.part2
        this._components[3] = num.part1
      } else if second == SizeMaximum {
        # a.b (uint8.uint24)
        # no 24-bit integer type so just upgrade it to uint32
        let num: UInt32ToUInt8 = parseNumber<uint32>(address.substring(from: first + 1, to: address.length))
        this._components[0] = parseNumber<uint8>(address.substring(from: 0, to: first))
        this._components[1] = num.part3
        this._components[2] = num.part2
        this._components[3] = num.part1
      } else if third == SizeMaximum {
        # a.b.c (uint8.uint8.uint16)
        let num: UInt16ToUInt8 = parseNumber<uint16>(address.substring(from: second + 1, to: address.length))
        this._components[0] = parseNumber<uint8>(address.substring(from: 0, to: first))
        this._components[1] = parseNumber<uint8>(address.substring(from: first + 1, to: second))
        this._components[2] = num.part2
        this._components[3] = num.part1
      } else {
        # a.b.c.d (uint8.uint8.uint.uint8)
        # this is the standard notation for IPv4 addresses
        # the others have just been added for compatibility with conventions
        # established by IP parsing functions in other languages (such as `inet_aton`)
        this._components[0] = parseNumber<uint16>(address.substring(from: 0, to: first))
        this._components[1] = parseNumber<uint16>(address.substring(from: first + 1, to: second))
        this._components[2] = parseNumber<uint16>(address.substring(from: second + 1, to: third))
        this._components[3] = parseNumber<uint16>(address.substring(from: third + 1, to: address.length))
      }
    }
  }

  public @from constructor(address: uint32) {
    let num: UInt32ToUInt8 = address
    this._components = new Vector<uint16>(items: num.part4, num.part3, num.part2, num.part1)
  }

  # @brief If true, this address is an [IPv4](https://en.wikipedia.org/wiki/IPv4) address.
  public @read function isIPv4(): bool {
    return !this._isV6
  }

  # @brief If true, this address is an [IPv6](https://en.wikipedia.org/wiki/IPv6) address.
  public @read function isIPv6(): bool {
    return this._isV6
  }

  # @brief Accesses a component at the specified index
  # @returns A reference to the component at the index
  # @param $ The index of the desired component
  # @note Throws an InvalidComponentIndex error when trying to access past the:
  #         * 3rd index (base-0) for IPv4
  #         * 7th index (base-0) for IPv6
  public this[uint8]: ref uint16 {
    # limit index to uint8 since we can only have up to 8 components
    # limit return value to uint16 since we components can have a maximum of 16 bits

    if this._isV6 && $ > 7 {
      throw new InvalidComponentIndex
    } else if !this._isV6 && $ > 3 {
      throw new InvalidComponentIndex
    }
    return this._components[$]
  }

  # @returns A string representation of this Address
  # @note IPv6 addresses will be represented with full shorthand (i.e. leading zeros and
  #       consecutive zero components omitted) and components will be in hexadecimal format
  # @note IPv4 addresses will be represented normally&mdash;i.e. decimal formatted
  #       components joined with dots (`.`)
  public to String {
    if this._isV6 {
      let longestIdx: uint8 = 0
      let longestCount: uint8 = 0
      let currentCount: uint8 = 0
      let lastIdx: uint8 = 0

      for i: uint8 in 0..this._components.length {
        if this._components[i] == 0 {
          if longestCount == 0 || lastIdx + 1 != i {
            currentCount = 0
          }
          lastIdx = i
          ;++currentCount
          if currentCount > longestCount {
            longestCount = currentCount
            longestIdx = i + 1 - currentCount
          }
        }
      }

      if longestCount == this._components.length {
        return "::"
      }

      let result: String
      let isFirst = true

      if longestCount > 1 {
        for i: uint8 in 0..longestIdx {
          if isFirst {
            isFirst = false
          } else {
            result += ':'
          }
          result += numberToString<uint16>(this._components[i], 16)
        }

        result += ':'
        isFirst = false
      }

      for i: uint8 in (longestCount > 1 ? longestIdx + longestCount : 0)..this._components.length {
        if isFirst {
          isFirst = false
        } else {
          result += ':'
        }
        result += numberToString<uint16>(this._components[i], 16)
      }

      if longestIdx + longestCount == this._components.length {
        result += ':'
      }

      return result
    } else {
      return
        numberToString<uint16>(this._components[0], 10) + '.' +
        numberToString<uint16>(this._components[1], 10) + '.' +
        numberToString<uint16>(this._components[2], 10) + '.' +
        numberToString<uint16>(this._components[3], 10)
    }
  }

  public to uint32 {
    if this._isV6
      throw new InvalidAddressType

    let num: UInt32ToUInt8 = 0
    num.part1 = this._components[3]
    num.part2 = this._components[2]
    num.part3 = this._components[1]
    num.part4 = this._components[0]

    return num
  }
}
