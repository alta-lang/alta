import String from "string"
import rawstring, rawconststring from "types"
import Exception, UnsupportedPlatform from "exceptions"
import Vector from "vector"
import getenv from "libc/lib/stdlib"
import printLine from "io"

export class InvalidKey extends Exception {}

# this *could* be made its own module and then just
# exported as a namespace, but this is better because
# it'll allow users to do `environment[key]` when operator
# overloads are added (which will only be available on classes)
class Environment {
  public function get(key: String): String {
    let tmp = getenv(key.data)
    if !tmp
      throw new InvalidKey
    return new String(tmp)
  }

  public this[String]: String {
    return this.get($)
  }
}

let environment: Environment = new Environment
export environment

##if platform == "darwin" || platform == "bsd"
import "./arch/bsd.alta" as native
##else if platform == "windows"
import "./arch/windows.alta" as native
##else if platform == "linux"
import "./arch/linux.alta" as native
##else
##define UNSUPPORTED_PLATFORM__PROCESS true
##end if

##if not defined(UNSUPPORTED_PLATFORM__PROCESS)
export native.Stream
export native.Process
using Stream = native.Stream
using Process = native.Process
##else
export class Stream {
  public constructor() {
    throw new UnsupportedPlatform
  }
}
export class Process {
  public constructor() {
    throw new UnsupportedPlatform
  }
}
##end if

export function arguments(): Vector<String> {
##if not defined(UNSUPPORTED_PLATFORM__PROCESS)
  return native.rawArgs()
##else
  throw new UnsupportedPlatform
##end if
}

export function spawn(program: String, args: Vector<String>): Process {
##if not defined(UNSUPPORTED_PLATFORM__PROCESS)
  return native.spawn(program, args)
##else
  throw new UnsupportedPlatform
##end if
}
