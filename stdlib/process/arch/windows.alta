@@CTranspiler.include("windows.h");
@@CTranspiler.include("processenv.h");

import Vector from "vector"
import String from "string"
import unsafeAllocate, unsafeFree, allocate, free from "memory"
import Size from "types"
import Map from "map"

export enum Error: int {
  None = 0,
  Unknown = 1,
  PipeCreationFailure,
  StreamAttributeAssignmentFailure,
  ProcessCreationFailure,
  HandleDestructionFailure,
  WrongStreamType,
  StreamFlushFailure,
  ReadFailure,
  WriteFailure,
  InvalidHandle,
}

type LPWSTR = any
type LPCWSTR = any
type UINT = any
type DWORD = any
type LPCCH = any
type LPSTR = any
type LPCWCH = any
type LPBOOL = any
type WCHAR = any
type SIZE_T = any
type HLOCAL = any
type BOOL = any
type LPVOID = any
type HANDLE = any
type LPBYTE = any
type WORD = any
type LPCSTR = any

@external @typed literal struct SECURITY_ATTRIBUTES {
  nLength: DWORD;
  lpSecurityDescriptor: LPVOID;
  bInheritHandle: BOOL;
}

@external @typed literal struct STARTUPINFOA {
  cb: DWORD;
  lpReserved: LPSTR;
  lpDesktop: LPSTR;
  lpTitle: LPSTR;
  dwX: DWORD;
  dwY: DWORD;
  dwXSize: DWORD;
  dwYSize: DWORD;
  dwXCountChars: DWORD;
  dwYCountChars: DWORD;
  dwFillAttribute: DWORD;
  dwFlags: DWORD;
  wShowWindow: WORD;
  cbReserved2: WORD;
  lpReserved2: LPBYTE;
  hStdInput: HANDLE;
  hStdOutput: HANDLE;
  hStdError: HANDLE;
}

@external @typed literal struct PROCESS_INFORMATION {
  hProcess: HANDLE;
  hThread: HANDLE;
  dwProcessId: DWORD;
  dwThreadId: DWORD;
}

declare literal var CP_ACP: const UINT
declare literal var MB_ERR_INVALID_CHARS: const DWORD
declare literal var LMEM_FIXED: const UINT

declare literal function GetCommandLineA(): LPSTR
declare literal function CommandLineToArgvW(lpCmdLine: LPCWSTR, pNumArgs: ptr int): ptr LPWSTR
declare literal function MultiByteToWideChar(CodePage: UINT, dwFlags: DWORD, lpMultiByteStr: LPCCH, cbMultiByte: int, lpWideCharStr: LPWSTR, cchWideChar: int): int
declare literal function WideCharToMultiByte(CodePage: UINT, dwFlags: DWORD, lpWideCharStr: LPCWCH, cchWideChar: int, lpMultiByteStr: LPSTR, cbMultiByte: int, lpDefaultChar: LPCCH, lpUsedDefaultChar: LPBOOL): int
declare literal function LocalFree(hMem: HLOCAL): HLOCAL

export function rawArgs(): Vector<String> {
  # translated into Alta and adapted from https://stackoverflow.com/a/4023686
  let lpCmdLine = GetCommandLineA()
  let requiredStringSize = MultiByteToWideChar(CP_ACP, MB_ERR_INVALID_CHARS, lpCmdLine, -1, nullptr, 0)
  let lpWideCharStr = unsafeAllocate(requiredStringSize * sizeof WCHAR) as LPWSTR
  MultiByteToWideChar(CP_ACP, MB_ERR_INVALID_CHARS, lpCmdLine, -1, lpWideCharStr, requiredStringSize)
  let numArgs: int = 0
  let args = CommandLineToArgvW(lpWideCharStr, &numArgs)
  unsafeFree(lpWideCharStr as ptr void)
  let sizes = new Vector<Size>
  # do NOT use Alta's `bool` type for `lpUsedDefaultChar`
  # Windows's BOOL type is a different size, and using
  # Alta's bool with WideCharToMultiByte will corrupt the stack
  for i: Size in 0..numArgs {
    let lpUsedDefaultChar: BOOL = false
    sizes.push(WideCharToMultiByte(CP_ACP, 0, args[i], -1, nullptr, 0, nullptr, &lpUsedDefaultChar as LPBOOL))
  }
  let result = new Vector<String>
  for i: Size in 0..numArgs {
    let lpUsedDefaultChar: BOOL = false
    let bufLen = sizes.get(i)
    let buffer = unsafeAllocate(bufLen) as LPSTR
    let extra = WideCharToMultiByte(CP_ACP, 0, args[i], -1, buffer, bufLen, nullptr, &lpUsedDefaultChar as LPBOOL)
    result.push(new String(buffer as ptr byte))
  }

  LocalFree(args as HLOCAL)

  return result
}

declare literal function CreatePipe(hReadPipe: ptr HANDLE, hWritePipe: ptr HANDLE, lpPipeAttributes: ptr SECURITY_ATTRIBUTES, nSize: DWORD): BOOL
declare literal function SetHandleInformation(hObject: HANDLE, dwMask: DWORD, dwFlags: DWORD): BOOL
declare literal function CreateProcessA(
  lpApplicationName: LPCSTR,
  lpCommandLine: LPSTR,
  lpProcessAttributes: ptr SECURITY_ATTRIBUTES,
  lpThreadAttributes: ptr SECURITY_ATTRIBUTES,
  bInheritHandles: BOOL,
  dwCreationFlags: DWORD,
  lpEnvironment: LPVOID,
  lpCurrentDirectory: LPCSTR,
  lpStartupInfo: ptr STARTUPINFOA,
  lpProcessInformation: ptr PROCESS_INFORMATION
): BOOL
declare literal function CloseHandle(handle: HANDLE): BOOL
declare literal function FlushFileBuffers(hFile: HANDLE): BOOL
declare literal function ReadFile(
  hFile: HANDLE,
  lpBuffer: LPVOID,
  nNumberOfBytesToRead: DWORD,
  lpNumberOfBytesRead: ptr DWORD,
  lpOverlapped: ptr void
): BOOL
declare literal function WriteFile(
  hFile: HANDLE,
  lpBuffer: LPVOID,
  nNumberOfBytesToWrite: DWORD,
  lpNumberOfBytesWritten: ptr DWORD,
  lpOverlapped: ptr void
): BOOL
declare literal function WaitForSingleObject(
  hHandle: HANDLE,
  dwMilliseconds: DWORD
): DWORD
declare literal function PeekNamedPipe(
  hNamedPipe: HANDLE,
  lpBuffer: LPVOID,
  nBufferSize: DWORD,
  lpBytesRead: ptr DWORD,
  lpTotalBytesAvail: ptr DWORD,
  lpBytesLeftThisMessage: ptr DWORD
): BOOL

declare literal var HANDLE_FLAG_INHERIT: const DWORD
declare literal var STARTF_USESTDHANDLES: const DWORD
declare literal var INFINITE: const DWORD

let streamTable: Map<ptr void, Size> = new Map<ptr void, Size>

export class Stream {
  private var handle = nullptr as HANDLE
  private var uselessHandle = nullptr as HANDLE
  private var isRead = false

  public constructor() {}
  public constructor(readHandle: HANDLE, writeHandle: HANDLE, isRead: bool) {
    this.handle = isRead ? readHandle : writeHandle
    this.isRead = isRead
    ;++streamTable.get(this.handle as ptr void)
  }
  public @copy constructor(other: ref Stream) {
    this.handle = other.handle
    this.uselessHandle = other.uselessHandle
    this.isRead = other.isRead
    ;++streamTable.get(this.handle as ptr void)
  }
  public destructor() {
    if this.handle != nullptr as HANDLE {
      this.close()
    }
  }

  private function ensureHandle(): void {
    assert this.handle != nullptr as HANDLE
  }

  public function flush(): Result<void, Error> {
    this.ensureHandle()

    if this.isRead {
      return new Result<void, Error>(error: Error.WrongStreamType)
    }

    if !FlushFileBuffers(this.handle) {
      return new Result<void, Error>(error: Error.StreamFlushFailure)
    }

    return new Result<void, Error>(ok: void)
  }

  public function bytesAvailable(): Result<Size, Error> {
    this.ensureHandle()

    if !this.isRead {
      return new Result<Size, Error>(error: Error.WrongStreamType)
    }

    let bytesAvailable = 0 as DWORD

    if !PeekNamedPipe(this.handle, nullptr as LPVOID, 0, nullptr, &bytesAvailable, nullptr) {
      return new Result<Size, Error>(error: Error.ReadFailure)
    }

    return new Result<Size, Error>(ok: bytesAvailable as Size)
  }

  public function read(count: Size): Result<String, Error> {
    this.ensureHandle()

    if !this.isRead {
      return new Result<String, Error>(error: Error.WrongStreamType)
    }

    let buffer = allocate<byte>(count)
    let bytesRead = 0 as DWORD

    if !ReadFile(this.handle, buffer as LPVOID, count as DWORD, &bytesRead, nullptr) {
      return new Result<String, Error>(error: Error.ReadFailure)
    }

    let str = new String(buffer, bytesRead as Size)

    free<byte>(buffer)

    return new Result<String, Error>(ok: str)
  }

  public function write(input: String): Result<void, Error> {
    this.ensureHandle()

    if this.isRead {
      return new Result<void, Error>(error: Error.WrongStreamType)
    }

    let bytesWritten = 0 as DWORD

    if !WriteFile(this.handle, input.data as LPVOID, input.length as DWORD, &bytesWritten, nullptr) {
      return new Result<void, Error>(error: Error.WriteFailure)
    }

    return new Result<void, Error>(ok: void)
  }

  public function close(): void {
    this.ensureHandle()

    ;--streamTable.get(this.handle as ptr void)

    if streamTable.get(this.handle as ptr void) == 0 {
      if !CloseHandle(this.handle) {
        # TODO: what should we do if we fail to close a handle?
      }

      if this.uselessHandle {
        if !CloseHandle(this.uselessHandle) {
          # TODO: same as above
        }
      }
    }
  }
}

function createPipe(read: ref HANDLE, write: ref HANDLE): Result<void, Error> {
  let securityAttrs = new SECURITY_ATTRIBUTES
  securityAttrs.nLength = sizeof SECURITY_ATTRIBUTES
  securityAttrs.bInheritHandle = true as BOOL
  securityAttrs.lpSecurityDescriptor = nullptr as LPVOID

  if !CreatePipe(&read, &write, &securityAttrs, 0 as DWORD) {
    return new Result<void, Error>(error: Error.PipeCreationFailure)
  }

  return new Result<void, Error>(ok: void)
}

function makeUninheritable(stream: ref HANDLE): Result<void, Error> {
  if !SetHandleInformation(stream, HANDLE_FLAG_INHERIT, 0 as DWORD) {
    return new Result<void, Error>(error: Error.StreamAttributeAssignmentFailure)
  }

  return new Result<void, Error>(ok: void)
}

function escapeForCommandLine(arg: String): String {
  if !arg.includes(' ', '\t', '\n', '\v', '"')
    return arg
  let result = new String("\"")
  for i: Size in 0..arg.length {
    let backlashes: Size = 0

    while i < arg.length && arg.charAt(i) == '\\' {
      ++i
      ;++backlashes
    }

    if i == arg.length {
      for j: Size in 0..backlashes * 2 {
        result.append('\\')
      }
      break
    } else {
      if arg.charAt(i) == '"' {
        for j: Size in 0..backlashes * 2 + 1 {
          result.append('\\')
        }
      } else {
        for j: Size in 0..backlashes {
          result.append('\\')
        }
      }
      result.append(arg.charAt(i))
    }
  }
  result.append('"')
  return result
}

let processTable: Map<ptr void, Size> = new Map<ptr void, Size>

export class Process {
  private var processInformation = new PROCESS_INFORMATION
  private var _stdin: Stream
  private var _stdout: Stream
  private var _stderr: Stream

  public constructor(processInformation: PROCESS_INFORMATION, stdin: Stream, stdout: Stream, stderr: Stream) {
    ++processTable.get(processInformation.hProcess as ptr void)
    this.processInformation = processInformation
    this._stdin = stdin
    this._stdout = stdout
    this._stderr = stderr
  }
  public @copy constructor(other: ref Process) {
    ++processTable.get(other.processInformation.hProcess as ptr void)
    this.processInformation = other.processInformation
    this._stdin = other.stdin
    this._stdout = other.stdout
    this._stderr = other.stderr
  }
  public destructor() {
    --processTable.get(this.processInformation.hProcess as ptr void)

    if processTable.get(this.processInformation.hProcess as ptr void) == 0 {
      if !CloseHandle(this.processInformation.hProcess) {
        # TODO: what should we do if handle destruction fails?
      }
      if !CloseHandle(this.processInformation.hThread) {
        # TODO: same as above
      }
    }
  }

  public @read function stdin(): Stream {
    return this._stdin
  }
  public @read function stdout(): Stream {
    return this._stdout
  }
  public @read function stderr(): Stream {
    return this._stderr
  }

  public function waitForExit(): void {
    WaitForSingleObject(this.processInformation.hProcess, INFINITE)
  }
}

export function spawn(programPath: String, args: Vector<String>): Result<Process, Error> {
  let stdinRead = nullptr as HANDLE
  let stdinWrite = nullptr as HANDLE

  let stdoutRead = nullptr as HANDLE
  let stdoutWrite = nullptr as HANDLE

  let stderrRead = nullptr as HANDLE
  let stderrWrite = nullptr as HANDLE

  if (let res = createPipe(stdinRead, stdinWrite)).isError {
    return res.morphError<Process>()
  }
  if (let res = createPipe(stdoutRead, stdoutWrite)).isError {
    return res.morphError<Process>()
  }
  if (let res = createPipe(stderrRead, stderrWrite)).isError {
    return res.morphError<Process>()
  }

  if (let res = makeUninheritable(stdinWrite)).isError) {
    return res.morphError<Process>()
  }
  if (let res = makeUninheritable(stdoutRead)).isError) {
    return res.morphError<Process>()
  }
  if (let res = makeUninheritable(stderrRead)).isError) {
    return res.morphError<Process>()
  }

  let cmdline = new String

  cmdline.append(escapeForCommandLine(programPath))

  for i: Size in 0..args.length {
    cmdline.append(' ')
    cmdline.append(escapeForCommandLine(args.get(i)))
  }

  let procInfo = new PROCESS_INFORMATION
  let startInfo = new STARTUPINFOA

  startInfo.cb = sizeof STARTUPINFOA
  startInfo.hStdError = stderrWrite
  startInfo.hStdOutput = stdoutWrite
  startInfo.hStdInput = stdinRead
  startInfo.dwFlags |= STARTF_USESTDHANDLES

  if !CreateProcessA(programPath.data as LPCSTR, cmdline.data as LPSTR, nullptr, nullptr, true as BOOL, 0 as DWORD, nullptr, nullptr, &startInfo, &procInfo) {
    return new Result<Process, Error>(error: Error.ProcessCreationFailure)
  }

  return new Result<Process, Error>(ok: new Process(procInfo, new Stream(stdinRead, stdinWrite, false), new Stream(stdoutRead, stdoutWrite, true), new Stream(stderrRead, stderrWrite, true)))
}
