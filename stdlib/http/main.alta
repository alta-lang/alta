import Vector from "vector"
import uint8, SizeMaximum, uint16, Size from "types"
import String, CodePoint from "string"
import Path from "uri"
import parseNumber, Pair, numberToString from "util"
import Exception from "exceptions"
import TCPSocket from "net"
import Address from "ip"
import List from "list"
import Map from "map"

export class ConnectionFailure extends Exception {}
export class MessageParsingException extends Exception {}

export class InvalidMessage extends MessageParsingException {}
export class InvalidStatus extends MessageParsingException {}
export class InvalidMethod extends MessageParsingException {}
export class InvalidField extends MessageParsingException {}

export enum Field: String {
	# these are prefixed such that they're never supposed to occur in actual HTTP data
	# (they're also impossible to match against because we lowercase input before comparing it to these values)
	None = "X-Alta-HTTP-None",
	Custom = "X-Alta-HTTP-Custom",

	# HTTP header field names are case-insensitive, so we use lowercase so that we can easily compare
	# field names from user input to these
	Accept             = "accept",
	AcceptCharset      = "accept-charset",
	AcceptEncoding     = "accept-encoding",
	AcceptLanguage     = "accept-language",
	AcceptRanges       = "accept-ranges",
	Age                = "age",
	Allow              = "allow",
	Authorization      = "authorization",
	CacheControl       = "cache-control",
	Connection         = "connection",
	ContentEncoding    = "content-encoding",
	ContentLanguage    = "content-language",
	ContentLength      = "content-length",
	ContentLocation    = "content-location",
	ContentMD5         = "content-md5",
	ContentRange       = "content-range",
	ContentType        = "content-type",
	Date               = "date",
	ETag               = "etag",
	Expect             = "expect",
	Expires            = "expires",
	From               = "from",
	Host               = "host",
	IfMatch            = "if-match",
	IfModifiedSince    = "if-modified-since",
	IfNoneMatch        = "if-none-match",
	IfRange            = "if-range",
	IfUnmodifiedSince  = "if-unmodified-since",
	LastModified       = "last-modified",
	Location           = "location",
	MaxForwards        = "max-forwards",
	Pragma             = "pragma",
	ProxyAuthenticate  = "proxy-authenticate",
	ProxyAuthorization = "proxy-authorization",
	Range              = "range",
	Referer            = "referer",
	RetryAfter         = "retry-after",
	Server             = "server",
	TE                 = "te",
	Trailer            = "trailer",
	TransferEncoding   = "transfer-encoding",
	Upgrade            = "upgrade",
	UserAgent          = "user-agent",
	Vary               = "vary",
	Via                = "via",
	Warning            = "warning",
	WWWAuthenticate    = "www-authenticate",
}

export enum Method: String {
	Get     = "GET",
	Head    = "HEAD",
	Post    = "POST",
	Put     = "PUT",
	Delete  = "DELETE",
	Connect = "CONNECT",
	Options = "OPTIONS",
	Trace   = "TRACE",
}

export enum Status: int {
	Continue                     = 100,
	SwitchingProtocols           = 101,
	OK                           = 200,
	Created                      = 201,
	Accepted                     = 202,
	NonAuthoritativeInformation  = 203,
	NoContent                    = 204,
	ResetContent                 = 205,
	PartialContent               = 206,
	MultipleChoices              = 300,
	MovedPermanently             = 301,
	Found                        = 302,
	SeeOther                     = 303,
	NotModified                  = 304,
	UseProxy                     = 305,
	SwitchProxy                  = 306,
	TemporaryRedirect            = 307,
	BadRequest                   = 400,
	Unauthorized                 = 401,
	PaymentRequired              = 402,
	Forbidden                    = 403,
	NotFound                     = 404,
	MethodNotAllowed             = 405,
	NotAcceptable                = 406,
	ProxyAuthenticationRequired  = 407,
	RequestTimeout               = 408,
	Conflict                     = 409,
	Gone                         = 410,
	LengthRequired               = 411,
	PreconditionFailed           = 412,
	RequestEntityTooLarge        = 413,
	RequestURITooLong            = 414,
	UnsupportedMediaType         = 415,
	RequestedRangeNotSatisfiable = 416,
	ExpectationFailed            = 417,
	InternalServerError          = 500,
	NotImplemented               = 501,
	BadGateway                   = 502,
	ServiceUnavailable           = 503,
	GatewayTimeout               = 504,
	HTTPVersionNotSupported      = 505,
}

using StatusPair = Pair<Status, String>
var statusMessages = new Map<Status, String>(items:
	new StatusPair(100, "Continue"),
	new StatusPair(101, "Switching Protocols"),
	new StatusPair(200, "OK"),
	new StatusPair(201, "Created"),
	new StatusPair(202, "Accepted"),
	new StatusPair(203, "Non-Authoritative Information"),
	new StatusPair(204, "No Content"),
	new StatusPair(205, "Reset Content"),
	new StatusPair(206, "Partial Content"),
	new StatusPair(300, "Multiple Choices"),
	new StatusPair(301, "Moved Permanently"),
	new StatusPair(302, "Found"),
	new StatusPair(303, "See Other"),
	new StatusPair(304, "Not Modified"),
	new StatusPair(305, "Use Proxy"),
	new StatusPair(306, "Switch Proxy"),
	new StatusPair(307, "Temporary Redirect"),
	new StatusPair(400, "Bad Request"),
	new StatusPair(401, "Unauthorized"),
	new StatusPair(402, "Payment Required"),
	new StatusPair(403, "Forbidden"),
	new StatusPair(404, "Not Found"),
	new StatusPair(405, "Method Not Allowed"),
	new StatusPair(406, "Not Acceptable"),
	new StatusPair(407, "Proxy Authentication Required"),
	new StatusPair(408, "Request Timeout"),
	new StatusPair(409, "Conflict"),
	new StatusPair(410, "Gone"),
	new StatusPair(411, "Length Required"),
	new StatusPair(412, "Precondition Failed"),
	new StatusPair(413, "Request Entity Too Large"),
	new StatusPair(414, "Request-URI Too Long"),
	new StatusPair(415, "Unsupported Media Type"),
	new StatusPair(416, "Requested Range Not Satisfiable"),
	new StatusPair(417, "Expectation Failed"),
	new StatusPair(500, "Internal Server Error"),
	new StatusPair(501, "Not Implemented"),
	new StatusPair(502, "Bad Gateway"),
	new StatusPair(503, "Service Unavailable"),
	new StatusPair(504, "Gateway Timeout"),
	new StatusPair(505, "HTTP Version Not Supported"),
)

function isSupportedHTTPVersion(str: String): bool {
	# technically, we only support and implement HTTP 1.0, but anything with the same major version
	# is backwards compatible, so we're fine
	return str.substring(from: 0, length: 7) == "HTTP/1."
}

export class Message {
	private var inHeaders = false
	module var inBody = false
	private var backlog: Vector<uint8>

	public var method: Method? = null
	public var status: Status? = null
	public var path: Path? = null
	public var headers: Map<Field, String>
	public var body: Vector<uint8>

	public function process(data: Vector<uint8>): void {
		if this.inBody {
			this.body += data
			return;
		}

		while data.length > 0 {
			let str = new String(data.data, data.length)
			if this.backlog.length > 0
				str ^= new String(this.backlog.data, this.backlog.length)

			let idx = str.indexOf('\r')
			let idx2 = str.indexOf('\n')

			if idx != SizeMaximum && idx2 == idx + 1 {
				# everything's good
			} else if idx == str.length - 1 {
				# it's possible that there's a `\n` coming next that we haven't received yet
				# backlog the data and wait for more
				this.backlog += data
				#data.clear() # don't need to clear because we just break out of the loop here
				break
			} else if idx != SizeMaximum || idx2 != SizeMaximum {
				# this is no longer an HTTP message
				throw new InvalidMessage
			} else {
				this.backlog += data
				#data.clear() # again, we don't need to clear it because we're breaking
				break
			}

			this.backlog.clear()

			let line = str.substring(to: idx)
			data = data.from(idx2 + 1)

			if line.length == 0 {
				# if the line is empty, that means we've found the double `\r\n` that indicates the start of the body
				this.inHeaders = false
				this.inBody = true
				this.body += data
				#data.clear() # same as before, no need to clear
				break
			}

			if this.inHeaders {
				let firstColon = line.indexOf(':')
				if firstColon == SizeMaximum
					throw new InvalidMessage

				let fieldName = line.substring(from: 0, to: firstColon).toLowerCase()

				# TODO: if we don't know about this header, we should warn the user somehow
				#if !(@reverse Field[fieldName]) {
					# warn the user somehow
				#}

				let val: String

				let afterWhitespace = line.indexOf((i: CodePoint) => bool { return i != ' ' && i != '\t' }, after: firstColon)
				if afterWhitespace != SizeMaximum
					val = line.substring(from: afterWhitespace)

				this.headers[fieldName] = val
			} else {
				let firstSpace = line.indexOf(' ')
				if firstSpace == SizeMaximum
					throw new InvalidMessage

				# both requests and responses require a second space
				# requests need it for `<method> <path> HTTP/<version>`
				# responses need it for `HTTP/<version> <code> <message>`
				let secondSpace = line.indexOf(' ', after: firstSpace)
				if secondSpace == SizeMaximum
					throw new InvalidMessage

				if isSupportedHTTPVersion(line.substring(from: 0, to: firstSpace)) {
					# we're dealing with a response

					let code = line.substring(from: firstSpace + 1, to: secondSpace)

					if code.includes((i: CodePoint) => bool { return i < '0' || i > '9' })
						throw new InvalidMessage

					this.status = parseNumber<Status>(code)

					# sanity check
					# make sure the status is known
					if !(@reverse Status[*this.status])
						throw new InvalidStatus

					# TODO: check the status message as well
				} else {
					# we're dealing with a request

					this.method = line.substring(to: firstSpace)

					# sanity check
					# make sure the method is known
					if !(@reverse Method[*this.method])
						throw new InvalidMethod

					let finalSpace = line.lastIndexOf(' ')

					if finalSpace == SizeMaximum || finalSpace < firstSpace + 1
						throw new InvalidMessage

					if !isSupportedHTTPVersion(line.substring(from: finalSpace + 1))
						throw new InvalidMessage

					this.path = line.substring(from: firstSpace + 1, to: finalSpace)
				}

				this.inHeaders = true
			}
		}
	}
}

enum IncomingRequestState: uint8 {
	Initial,
	Ready,
	Handled,
}

export class IncomingRequest {
	private var address: Address
	private var port: uint16

	module var message: Message
	module var socket: TCPSocket
	module var state = IncomingRequestState.Initial
	module var id: Size = 0

	module constructor(socket: TCPSocket, location: Pair<Address, uint16>) {
		this.socket = socket
		this.address = location.first
		this.port = location.second
	}

	public @read function method(): Method {
		return *this.message.method
	}

	public @read function path(): Path {
		return *this.message.path
	}

	public @read function headers(): Map<Field, String> {
		return this.message.headers
	}
}

export class OutgoingResponse {
	private var wroteHeaders = false

	public var status: Status = Status.OK
	public var statusMessage: String? = null
	public var headers: Map<Field, String>

	module var socket: TCPSocket
	module var id: Size = 0
	module var buffer: Vector<uint8>
	module var _ended = false

	public constructor() {}
	module constructor(socket: TCPSocket) {
		this.socket = socket
	}

	private function writeHeaders(): void {
		this.buffer.push("HTTP/1.0 " as ptr const uint8, length: 9)

		let numStr = numberToString<Status>(this.status) + ' ' # remember we need a space after the code
		this.buffer.push(numStr.data as ptr const uint8, length: numStr.byteLength)

		if this.statusMessage {
			this.buffer.push((*this.statusMessage).data as ptr const uint8, length: (*this.statusMessage).byteLength)
		} else if statusMessages.has(this.status) {
			let msg: ref String = statusMessages[this.status]
			this.buffer.push(msg.data as ptr const uint8, length: msg.byteLength)
		} else {
			this.buffer.push("Unknown" as ptr const uint8, length: 7)
		}

		this.buffer.push("\r\n" as ptr const uint8, length: 2)

		for header: Pair<Field, String> in this.headers.items {
			this.buffer.push(header.first.data as ptr const uint8, length: header.first.byteLength)
			this.buffer.push(": " as ptr const uint8, length: 2)
			this.buffer.push(header.second.data as ptr const uint8, length: header.second.byteLength)
			this.buffer.push("\r\n" as ptr const uint8, length: 2)
		}

		this.buffer.push("\r\n" as ptr const uint8, length: 2)

		this.wroteHeaders = true
	}

	module function trySend(): ref OutgoingResponse {
		# use the `send(data:length:)` variant to avoid copying the buffer
		let sent = this.socket.send(this.buffer.data, length: this.buffer.length)
		if sent
			this.buffer.remove(from: 0, length: *sent)
		return this
	}

	public function send(): ref OutgoingResponse {
		if !this.wroteHeaders
			this.writeHeaders()

		return this.trySend()
	}
	public function send(data: ptr const uint8, length: Size): ref OutgoingResponse {
		if !this.wroteHeaders
			this.writeHeaders()
		this.buffer.push(data, length: length)
		return this.send()
	}
	public function send(data: Vector<uint8>): ref OutgoingResponse {
		# Vector has a `this += Vector<T>` operator, but this way we avoid unnecessary copies and allocations
		#
		# this way only copies once, while the other *currently* requires:
		#   * a copy of the *entire* vector into the operator method (`this += Vector<T>`)
		#     * this also means that we have to copy all the elements if their types can be copied
		#   * a copy of each item into the vector via push
		#     * this is accomplished via `push(item: T)`, which means that if the type *can* be copied, it will be copied into the method
		#     * ...and then, if the item can be copied, it will be copied from the argument into the vector
		# ...so that's currently a total of 4 possible copies
		#
		# Alta will eventually start doing more optimizations, to the point where we can eliminate all those unnecessary copies and
		# we'll get it down to a single copy of each element, just like we have with the direct pointer and length, because:
		#   * we can avoid the copy of the vector into the operator because it's the last usage of the parameter `data` in this method
		#     * this means we also avoid the unnecessary copy of each element because we don't copy the vector
		#   * then we copy each element when we call `push` with them (as we currently do)
		#   * but then we can avoid the copy the element inside of `push` when assigning it to the array,
		#     because it's the last usage of the parameter in that method
		# ...so we would only copy each element once
		return this.send(data.data, data.length)
	}
	public function send(data: ptr const byte, length: Size): ref OutgoingResponse {
		return this.send(data as ptr const uint8, length)
	}
	public function send(string: String): ref OutgoingResponse {
		return this.send(string.data as ptr const uint8, string.byteLength)
	}

	public function end(): void {
		this.send()
		this._ended = true
	}
	public function end(data: Vector<uint8>): void {
		this.send(data)
		this._ended = true
	}
	public function end(data: ptr const uint8, length: Size): void {
		this.send(data, length)
		this._ended = true
	}
	public function end(data: ptr const byte, length: Size): void {
		this.send(data, length)
		this._ended = true
	}
	public function end(string: String): void {
		this.send(string)
		this._ended = true
	}
}

#
# TODO: asynchronicity
#
# whether this is via coroutines or threads remains to be seen
# (probably both)
#
# in general, coroutines might be easier to implement in Alta, because the current runtime is
# designed with a single thread in mind and is NOT thread safe AT ALL and would probably require
# a bunch of modifications to make it play nice with threads
#
# until either one of those things happens, this is a semi-synchronous server
#
# i say "semi-synchronous" because, internally, it does use async socket methods and implements a sort of cooperation between
# sockets in `tick`, allowing it to hanlde multiple clients at a time)
#
export class Server {
	private var socket: TCPSocket

	# it *is* possible for this to overflow if the server is getting many requests but realistically,
	# the number of requests would be so unbelievably high that it's next-to-impossible for the first
	# request (with id 0) to still be pending at the same time as the very last request
	# (with id 18,446,744,073,709,551,615 on 64-bit systems)
	private var idCounter: Size = 0

	# we use a List instead of a Vector so that the pointers we pass into request handlers don't get invalidated when another
	# response is sent and thus removed from the List
	#
	# reason:
	# Vectors have to reallocate the array and move their elements when an element is removed,
	# but Lists are internally implemented as doubly-linked lists, which means that their values
	# are all allocated individually and managed by a bunch of also-individually-allocated nodes that reference each other
	#
	# long story short: we use List to prevent pointer invalidation and Bad News Bears from coming
	private var responses: List<OutgoingResponse>
	private var pendingRequests: List<IncomingRequest>

	# TODO: create something like Node's EventEmitter
	public var requestHandler: (IncomingRequest, ref OutgoingResponse) => void = (req: IncomingRequest, res: ref OutgoingResponse) => void {
		res.status = Status.NotFound
		res.headers["Content-Length"] = "9"
		res.end("Not found")
	}

	public function listen(address: Address = "0.0.0.0", port: uint16 = 80): void {
		this.socket.bind(address, port)
		this.socket.listen(10)
	}

	public function tick(): void {
		let client = this.socket.accept()
		# if we've got a new request, create the necessary objects for the request and response
		if client {
			let req: ref IncomingRequest = this.pendingRequests.pushBack(new IncomingRequest((*client).first, (*client).second))
			let res: ref OutgoingResponse = this.responses.pushBack(new OutgoingResponse((*client).first))
			req.id = res.id = this.idCounter++
		}

		# try to receive request information for requests that are still in progress
		for i: Size in 0..this.pendingRequests.length {
			let req: ref IncomingRequest = this.pendingRequests[i]
			if req.state == IncomingRequestState.Initial {
				let maybeData = req.socket.receive()
				if maybeData {
					# try to parse the data
					try {
						req.message.process(*maybeData)
						# if we've reached the body, we're done waiting and we can hand off the request to the handler
						# if they want the message body, they can ask for it later
						if req.message.inBody {
							# if we don't have a method, it's not a request
							# throw an error so that our exception handler tells the client that they made a bad request
							if !req.message.method
								throw new MessageParsingException

							# same here: no path = not a request
							if !req.message.path
								throw new MessageParsingException

							req.state = IncomingRequestState.Ready
						}
					} catch e: MessageParsingException {
						# if we failed to parse it, tell the client they made a bad request and remove the request
						req.state = IncomingRequestState.Handled
						for res: ref OutgoingResponse in this.responses.items {
							if res.id == req.id {
								res.status = Status.BadRequest
								res.end()
								this.pendingRequests.remove(i)
								--i
								break
							}
						}
					}
				}
			}
		}

		# handle requests that are ready to be handled
		for i: Size in 0..this.pendingRequests.length {
			let req: ref IncomingRequest = this.pendingRequests[i]
			if req.state == IncomingRequestState.Ready {
				req.state = IncomingRequestState.Handled
				for res: ref OutgoingResponse in this.responses.items {
					if res.id == req.id {
						this.requestHandler(req, res)
						break
					}
				}
				this.pendingRequests.remove(i)
				--i
			}
		}

		# process outgoing responses and allow them to send some data
		for i: Size in 0..this.responses.length {
			let res: ref OutgoingResponse = this.responses[i]
			if res.buffer.length > 0
				res.trySend()
			if res.buffer.length == 0 && res._ended {
				this.responses.remove(i)
				--i
			}
		}
	}
}

enum IncomingResponseState: uint8 {
	Initial,
	Ready,
	Handled,
}

export class IncomingResponse {
	module var message: Message
	module var socket: TCPSocket
	module var state = IncomingResponseState.Initial

	module constructor(socket: TCPSocket) {
		this.socket = socket
	}

	public @read function status(): Status {
		return *this.message.status
	}

	public @read function headers(): Map<Field, String> {
		return this.message.headers
	}

	public function receive(): Vector<uint8>? {
		if this.message.body.length > 0 {
			let copy = this.message.body
			this.message.body.clear()
			return copy
		}
		return this.socket.receive()
	}
}

export class OutgoingRequest {
	private var wroteHeaders = false

	public var path: Path
	public var method: Method = Method.Get
	public var headers: Map<Field, String>

	module var socket: TCPSocket
	module var buffer: Vector<uint8>
	module var _ended = false

	public constructor() {}
	module constructor(socket: TCPSocket) {
		this.socket = socket
	}

	private function writeHeaders(): void {
		this.buffer.push(this.method.data as ptr const uint8, length: this.method.byteLength)

		this.buffer.push(' ')

		let pathStr = this.path as String
		this.buffer.push(pathStr.data as ptr const uint8, length: pathStr.byteLength)

		this.buffer.push(" HTTP/1.0\r\n" as ptr const uint8, length: 11)

		for header: Pair<Field, String> in this.headers.items {
			this.buffer.push(header.first.data as ptr const uint8, length: header.first.byteLength)
			this.buffer.push(": " as ptr const uint8, length: 2)
			this.buffer.push(header.second.data as ptr const uint8, length: header.second.byteLength)
			this.buffer.push("\r\n" as ptr const uint8, length: 2)
		}

		this.buffer.push("\r\n" as ptr const uint8, length: 2)

		this.wroteHeaders = true
	}

	module function trySend(): ref OutgoingRequest {
		if this.socket.connecting
			return this
		if !this.socket.connected
			return this
		# use the `send(data:length:)` variant to avoid copying the buffer
		let sent = this.socket.send(this.buffer.data, length: this.buffer.length)
		if sent
			this.buffer.remove(from: 0, length: *sent)
		return this
	}

	public function send(): ref OutgoingRequest {
		if !this.wroteHeaders
			this.writeHeaders()

		return this.trySend()
	}
	public function send(data: ptr const uint8, length: Size): ref OutgoingRequest {
		if !this.wroteHeaders
			this.writeHeaders()
		this.buffer.push(data, length: length)
		return this.send()
	}
	public function send(data: Vector<uint8>): ref OutgoingRequest {
		# Vector has a `this += Vector<T>` operator, but this way we avoid unnecessary copies and allocations
		#
		# this way only copies once, while the other *currently* requires:
		#   * a copy of the *entire* vector into the operator method (`this += Vector<T>`)
		#     * this also means that we have to copy all the elements if their types can be copied
		#   * a copy of each item into the vector via push
		#     * this is accomplished via `push(item: T)`, which means that if the type *can* be copied, it will be copied into the method
		#     * ...and then, if the item can be copied, it will be copied from the argument into the vector
		# ...so that's currently a total of 4 possible copies
		#
		# Alta will eventually start doing more optimizations, to the point where we can eliminate all those unnecessary copies and
		# we'll get it down to a single copy of each element, just like we have with the direct pointer and length, because:
		#   * we can avoid the copy of the vector into the operator because it's the last usage of the parameter `data` in this method
		#     * this means we also avoid the unnecessary copy of each element because we don't copy the vector
		#   * then we copy each element when we call `push` with them (as we currently do)
		#   * but then we can avoid the copy the element inside of `push` when assigning it to the array,
		#     because it's the last usage of the parameter in that method
		# ...so we would only copy each element once
		return this.send(data.data, data.length)
	}
	public function send(data: ptr const byte, length: Size): ref OutgoingRequest {
		return this.send(data as ptr const uint8, length)
	}
	public function send(string: String): ref OutgoingRequest {
		return this.send(string.data as ptr const uint8, string.byteLength)
	}

	public function end(): void {
		this.send()
		this._ended = true
	}
	public function end(data: Vector<uint8>): void {
		this.send(data)
		this._ended = true
	}
	public function end(data: ptr const uint8, length: Size): void {
		this.send(data, length)
		this._ended = true
	}
	public function end(data: ptr const byte, length: Size): void {
		this.send(data, length)
		this._ended = true
	}
	public function end(string: String): void {
		this.send(string)
		this._ended = true
	}
}

export class Client {
	private var socket: TCPSocket
	private var _request = new OutgoingRequest(this.socket)
	private var response = new IncomingResponse(this.socket)
	private var responseHandler: (IncomingResponse) => void = (res: IncomingResponse) => void {}

	public constructor(handler: (IncomingResponse) => void) {
		this.responseHandler = handler
	}

	public function connect(address: Address, port: uint16 = 80): void {
		this.socket.connect(address, port)
	}

	public @read function request(): ref OutgoingRequest {
		return this._request
	}

	public function tick(): void {
		if this.socket.connectionFailure
			throw new ConnectionFailure
		if this.response.state == IncomingResponseState.Handled
			return;
		if this._request.buffer.length == 0 && this._request._ended {
			let maybeData = this.socket.receive()
			if maybeData {
				# not sure if it's best to throw an error here in the `tick` method,
				# maybe we should add another parameter to the response handler like Node.js does with `err` in most of their callbacks?
				this.response.message.process(*maybeData)
				# if we've reached the body, we're done waiting and we can hand off the response to the handler
				# they can get the body themselves
				if this.response.message.inBody {
					# if we don't have a status, it's not a response
					# throw an error so that the user knows the server did something naughty
					if !this.response.message.status
						throw new MessageParsingException

					this.response.state = IncomingResponseState.Ready
				}
			}
			if this.response.state == IncomingResponseState.Ready {
				this.response.state = IncomingResponseState.Handled
				this.responseHandler(this.response)
			}
		} else if this._request.buffer.length > 0 {
			this._request.trySend()
		}
	}
}
