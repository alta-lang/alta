# TODO: add fine-resolution importing, to allow this for example:
#           import Runtime.Native._Alta_basic_class from "meta"
import "meta/lib/runtime/native" as native
import Queue from "queue"
import free from "memory"
import List from "list"
import Size, uint64, UInt64Maximum from "types"

##if platform == "windows"
	import "./arch/windows.alta" as arch
##else
	import "./arch/posix.alta" as arch
##end if

export arch.HandleType

export type ID = uint64

type Coro = ptr native._Alta_basic_coroutine_state

#
# TODO: don't use regular old Queue for our workqueue
#       it's pretty inefficient since it will reallocate memory every time we `push` and `pop` to/from it
#
#       it's fine for Queue to do that for most use cases, but for us, we need to be constantly pushing and popping,
#       and often we have to pop and then push the same value right back, so it'd be nice for us to have a more
#       efficient implementation where we manually determine when workitems' lifetimes end
#

export class Scheduler {
	private var owned = new List<native._Alta_basic_coroutine_state>
	private var work = new Queue<Coro>
	private var sleeping = new Queue<Coro>

	# doesn't really matter if this overflows
	# for one, `2**64 - 1` is a *really* big value, so it's unlikely we'll ever run into it
	# two, if we *do* hit it, it's unlikely that the first coroutine will still be around when
	# the counter wraps back around (again: `2**64 - 1` is a **really** big value)
	#
	# `0` is the value that is off-limits (since all coroutines are initialized with it)
	private var counter: ID = 0

	# used by us internally and by the compiler
	private function _schedule(coroutine: Coro): Coro {
		# NOTE: this commented-out code is for if we want to guarantee that the given coroutine will run
		#       immediately after being scheduled. i'm not sure if we want those semantics or not.
		#       for now, we have it commented out which has the result of making the semantics effectively
		#       be that the coroutine will run whenever the scheduler decides (which at the moment means it
		#       depends on how long the workqueue is)
		#if !coroutine.done
		#	coroutine.next(coroutine)
		#if coroutine.done
		#	return coroutine

		return this.work.push(coroutine)
	}

	# @brief Schedules a coroutine to run independently
	# @param coroutine The coroutine to schedule
	# @desc This method schedules a given coroutine to run on this Scheduler whenever it gets a chance.
	#       Coroutines scheduled in this manner will have their return values discarded, and as such, this method cannot
	#       be used if you want to get a return value from it. For that, you *must* use `await`, instead.
	# @returns An identifier for the coroutine that can be used to retrieve status information using this Scheduler
	# @note You **must not** use the coroutine passed in after scheduling it. It is currently not-so-undefined behavior to do so,
	#       and doing so will lead to certain death. The compiler will check for and stop this behavior soon, but for now,
	#       make sure you don't blow anything up.
	#       Once you pass a coroutine to this method, assume it is null and void for all intents and purposes.
	public function schedule(coroutine: native._Alta_basic_coroutine_state): ID {
		if this.counter == UInt64Maximum {
			++this.counter # wrap over to `0`, so that our coroutine will skip to `1`
			# remember, `0` is the no-no value
		}
		return (this.work.push(&this.owned.pushBack(coroutine)).id = ++this.counter)
	}

	# @brief Completes one iteration of a scheduled coroutine
	# @returns A boolean indicating whether you should call this method again (if `true`), or not (if `false`)
	public function tick(): bool {
		if this.work.length == 0
			return false
		let co = this.work.pop()
		if co.waitingFor && co.waitingFor.generator.done
			co.waitingFor = nullptr
		if !co.waitingFor
			co.next(co)
		if co.generator.done {
			for i: Size in 0..this.owned.length {
				let item: ref native._Alta_basic_coroutine_state = this.owned[i]
				if &item == co {
					free<void>(item.value)
					this.owned.remove(i)
					break
				}
			}
		} else {
			this.work.push(co)
		}
		return true
	}

	# @brief Indicates whether this Scheduler has any coroutines currently scheduled that can be immediately run
	public @read function hasWorkReady(): bool {
		return this.work.length != 0
	}

	# @brief Indicates whether this Scheduler has any coroutines that *can* run, including any that may be currently sleeping
	public @read function hasWork(): bool {
		return this.work.length != 0 || this.sleeping.length != 0
	}

	# @brief Schedules the given coroutine and waits for it to finish
	# @param coroutine A pointer to the coroutine to schedule and finish
	# @returns The same coroutine pointer passed in
	# @note This method waits for the coroutine, but it also runs other coroutines as they normally would be,
	#       and as such, those iterations will also be waited for
	public function runToCompletion(coroutine: Coro): Coro {
		# NOTE: same note as in `_schedule`; i'm not sure if we want this quick-exit behavior
		#if !coroutine.generator.done
		#	coroutine.next(coroutine)
		#if coroutine.generator.done
		#	return;

		this.work.push(coroutine)
		while !coroutine.generator.done
			this.tick()
		return coroutine
	}

	# @brief Waits for all scheduled coroutines to finish running
	public function finishAll(): void {
		while this.tick() {}
	}

	# @brief Tells you whether a coroutine with the given ID is scheduled to run
	# @param id The ID to check for
	# @returns A value indicating whether a coroutine with the given ID is scheduled to run
	# @note This method can only tell you if a coroutine with the given ID is *currently* scheduled to run. Thats means that
	#       the ID might not be valid by the time you use it or it might never have been valid. There is no way
	#       to ask the scheduler whether the ID was previously scheduled; the only way to know that is if you scheduled
	#       it yourself or know that someone else did.
	# @note This method will tell you if the coroutine is *scheduled to run*. To know if it's sleeping, use `isSleeping`,
	#       and if you want to know if it's either scheduled to run or sleeping, use `isManaged`.
	public function isScheduled(id: ID): bool {
		for item: Coro in this.work.items {
			if item.id == id
				return true
		}
		return false
	}

	# @brief Tells you whether a coroutine with the given ID is currently sleeping
	# @param id The ID to check for
	# @returns A value indicating whether a coroutine with the given ID is sleeping
	# @note Please refer to the first note on `isScheduled`. Like `isScheduled`, this method can only tell you if a coroutine
	#       with the given ID is *currently* sleeping, not whether it has been previously.
	# @note This method will tell you if the coroutine is *sleeping*. To know if it's scheduled to run, use `isScheduled`,
	#       and if you want to know if it's either scheduled to run or sleeping, use `isManaged`.
	public function isSleeping(id: ID): bool {
		for item: Coro in this.sleeping.items {
			if item.id == id
				return true
		}
		return false
	}

	# @brief Tells you whether a coroutine with the given ID is being managed by this Scheduler
	# @param id The ID to check for
	# @returns A value indicating whether a coroutine with the given ID is being managed by this Scheduler
	# @note Please refer to the first note on `isScheduled`. Like `isScheduled`, this method can only tell you if a coroutine
	#       with the given ID is *currently* being managed by this Scheduler, not whether is has been previously.
	# @note This method will tell you if the coroutine is *being managed by this Scheduler*, which includes either
	#       currently running or sleeping. To know specifically if it's scheduled to run, use `isScheduled`,
	#       and to know specifically if it's sleeping, use `isSleeping`.
	public function isManaged(id: ID): bool {
		return this.isScheduled(id) || this.isSleeping(id)
	}
}
