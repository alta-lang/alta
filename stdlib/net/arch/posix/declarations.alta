@@CTranspiler.include("arpa/inet.h");
@@CTranspiler.include("netinet/in.h");
@@CTranspiler.include("sys/socket.h");
@@CTranspiler.include("sys/uio.h");
@@CTranspiler.include("sys/types.h");
@@CTranspiler.include("sys/ioctl.h");
@@CTranspiler.include("unistd.h");
@@CTranspiler.include("errno.h");
@@CTranspiler.include("poll.h");

import uint32, uint16, Size from "types"

#
# sys/types.h
#

export type ssize_t = any

#
# arpa/inet.h
#

declare literal export @CTranspiler.macro function htonl(host: uint32): uint32
declare literal export @CTranspiler.macro function htons(host: uint16): uint16
declare literal export @CTranspiler.macro function ntohl(net: uint32): uint32
declare literal export @CTranspiler.macro function ntohs(net: uint16): uint16

#
# netinet/in.h
#

export type in_port_t = uint16
export type in_addr_t = uint32
export type sa_family_t = any

export literal @external struct in_addr {
	s_addr: in_addr_t;
}

export literal @external struct sockaddr {
	sin_family: sa_family_t;
}

export literal @external struct sockaddr_in {
	sin_family: sa_family_t;
	sin_port: in_port_t;
	sin_addr: in_addr;
}

declare literal export var IPPROTO_IP: const int
declare literal export var IPPROTO_IPV6: const int
declare literal export var IPPROTO_ICMP: const int
declare literal export var IPPROTO_RAW: const int
declare literal export var IPPROTO_TCP: const int
declare literal export var IPPROTO_UDP: const int

#
# sys/uio.h
#

export literal @external struct iovec {
	iov_base: ptr void;
	iov_len: Size;
}

#
# sys/socket.h
#

export type socklen_t = any

export literal @external struct msghdr {
	msg_name: ptr void;
	msg_namelen: socklen_t;
	msg_iov: ptr iovec;
	msg_iovlen: int;
	msg_control: ptr void;
	msg_controllen: socklen_t;
	msg_flags: int;
}

declare literal export var AF_UNSPEC: const int
declare literal export var AF_UNIX: const int
declare literal export var AF_INET: const int
declare literal export var AF_INET6: const int

declare literal export var SOCK_STREAM: const int
declare literal export var SOCK_DGRAM: const int
declare literal export var SOCK_SEQPACKET: const int

declare literal export var MSG_CTRUNC: const int
declare literal export var MSG_DONTROUTE: const int
declare literal export var MSG_EOR: const int
declare literal export var MSG_OOB: const int
declare literal export var MSG_NOSIGNAL: const int
declare literal export var MSG_PEEK: const int
declare literal export var MSG_TRUNC: const int
declare literal export var MSG_WAITALL: const int

declare literal export var SCM_RIGHTS: const int

declare literal export var SOL_SOCKET: const int

declare literal export var SO_ACCEPTCONN: const int
declare literal export var SO_BROADCAST: const int
declare literal export var SO_DEBUG: const int
declare literal export var SO_DONTROUTE: const int
declare literal export var SO_ERROR: const int
declare literal export var SO_KEEPALIVE: const int
declare literal export var SO_LINGER: const int
declare literal export var SO_OOBINLINE: const int
declare literal export var SO_RCVBUF: const int
declare literal export var SO_RCVLOWAT: const int
declare literal export var SO_RCVTIMEO: const int
declare literal export var SO_REUSEADDR: const int
declare literal export var SO_SNDBUF: const int
declare literal export var SO_SNDLOWAT: const int
declare literal export var SO_SNDTIMEO: const int
declare literal export var SO_TYPE: const int

declare literal export var SOMAXCONN: const int

declare literal export var SHUT_RD: const int
declare literal export var SHUT_RDWR: const int
declare literal export var SHUT_WR: const int

declare literal export function accept(socket: int, address: ptr sockaddr, addressLength: ptr socklen_t): int
declare literal export function bind(socket: int, address: ptr const sockaddr, addressLength: socklen_t): int
declare literal export function connect(socket: int, address: ptr const sockaddr, addressLength: socklen_t): int
declare literal export function getpeername(socket: int, address: ptr sockaddr, addressLength: ptr socklen_t): int
declare literal export function getsockname(socket: int, address: ptr sockaddr, addressLength: ptr socklen_t): int
declare literal export function getsockopt(socket: int, level: int, option: int, value: ptr void, valueLength: ptr socklen_t): int
declare literal export function listen(socket: int, backlog: int): int
declare literal export function recv(socket: int, data: ptr void, length: Size, flags: int): ssize_t
declare literal export function recvfrom(socket: int, data: ptr void, length: Size, flags: int, address: ptr sockaddr, addressLength: ptr socklen_t): ssize_t
declare literal export function recvmsg(socket: int, message: ptr msghdr, flags: int): ssize_t
declare literal export function send(socket: int, buffer: ptr const void, length: Size, flags: int): ssize_t
declare literal export function sendmsg(socket: int, message: ptr const msghdr, flags: int): ssize_t
declare literal export function sendto(socket: int, message: ptr const void, length: Size, flags: int, address: ptr const sockaddr, addressLength: socklen_t): ssize_t
declare literal export function setsockopt(socket: int, level: int, option: int, value: ptr const void, valueLength: socklen_t): int
declare literal export function shutdown(socket: int, mode: int): int
declare literal export function sockatmark(socket: int): int
declare literal export function socket(domain: int, type: int, protocol: int): int
declare literal export function socketpair(domain: int, type: int, protocol: int, array: ptr int): int

#
# sys/ioctl.h
#

declare literal export var FIONREAD: const unsigned long int

declare literal export function ioctl(fd: int, request: unsigned long int, @CTranspiler.vararg args: any...): int

#
# unistd.h
#

declare literal export function close(handle: int): int

#
# errno.h
#

declare literal export var errno: int

#
# poll.h
#

export type nfds_t = any

export literal @external struct pollfd {
	fd: int;
	events: short int;
	revents: short int;
}

declare literal export var POLLIN: const int
declare literal export var POLLRDNORM: const int
declare literal export var POLLRDBAND: const int
declare literal export var POLLPRI: const int
declare literal export var POLLOUT: const int
declare literal export var POLLWRNORM: const int
declare literal export var POLLWRBAND: const int
declare literal export var POLLERR: const int
declare literal export var POLLHUP: const int
declare literal export var POLLNVAL: const int

declare literal export function poll(fds: ptr pollfd, length: nfds_t, timeout: int): int
