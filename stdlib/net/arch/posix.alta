import native as posix from "posix"
import Address from "ip"
import uint32, uint16, Size, uint8 from "types"
import Vector from "vector"
import Pair, BucketList from "util"
import Box, allocate from "memory"

export enum Error: int {
	None = 0,
	Unknown = 1,
	SocketAllocationFailure,
	SocketBindFailure,
	SocketListenFailure,
	SocketAcceptFailure,
	SocketConnectFailure,
	SocketSendFailure,
	IOCTLFailure,
	SocketReceiveFailure,
	SocketCloseFailure,
	PollFailure,
	FcntlFailure,
	GetsockoptFailure,
	WouldBlock,
}

export enum SocketType: int {
	None = -1,
	Stream = posix.SOCK_STREAM,
	Datagram = posix.SOCK_DGRAM,
	PacketSequence = posix.SOCK_SEQPACKET,
}

export enum Protocol: int {
	None = -1,
	GenericIPv4 = posix.IPPROTO_IP,
	GenericIPv6 = posix.IPPROTO_IPV6,
	ICMP = posix.IPPROTO_ICMP,
	Raw = posix.IPPROTO_RAW,
	TCP = posix.IPPROTO_TCP,
	UDP = posix.IPPROTO_UDP,
}

enum SocketState: int {
	Initial,
	Connecting,
	Connected,
	FailedToConnect,
}

#
# @brief An asynchronous internet socket class
# @note This is *not* a general purpose POSIX socket wrapper.
#       Instead, it is specifically for internet sockets.
# @note This socket is *always* internally non-blocking. Certain methods may act as blocking,
#       but internally, they just wait until the call is ready.
export class Socket {
	private var handle: int = -1
	private var _type: SocketType = SocketType.None
	private var _protocol: Protocol = Protocol.None
	private var dtor: BucketList
	# we need to keep the state in a Box because it needs to be shared by all copies of this socket
	private var _state: Box<SocketState> = nullptr

	public constructor() {}

	# TODO: Alta needs to be able to delegate constructors so that we don't have to do this
	private function construct(handle: int, type: SocketType, protocol: Protocol, state: SocketState): Result<void, Error> {
		this._type = type
		this._protocol = protocol
		this.handle = handle
		this._state = *allocate<SocketState>(1)
		this._state as ref SocketState = state

		this.dtor = new BucketList(@copy(handle) () => void {
			if posix.close(handle) == -1 {
				# TODO: what should we do if we fail to close the socket?
			}
		})

		# always make the socket non-blocking

		let flags = posix.fcntl(this.handle, posix.F_GETFL)
		if flags == -1
			return new Result<void, Error>(error: Error.FcntlFailure)

		if posix.fcntl(this.handle, posix.F_SETFL, flags | posix.O_NONBLOCK) == -1
			return new Result<void, Error>(error: Error.FcntlFailure)

		return new Result<void, Error>(ok: true)
	}

	private function construct(type: SocketType, protocol: Protocol): Result<void, Error> {
		let handle = posix.socket(posix.AF_INET, type, protocol)

		if handle == -1
			return new Result<void, Error>(error: Error.SocketAllocationFailure)

		return this.construct(handle, type, protocol, SocketState.Initial)
	}

	public constructor(type: SocketType, protocol: Protocol) {
		assert this.construct(type, protocol).isOk
	}

	public constructor(type: SocketType) {
		assert this.construct(type, 0).isOk # let the OS determine what protocol to use
	}

	private constructor(handle: int, type: SocketType, protocol: Protocol, state: SocketState) {
		assert this.construct(handle, type, protocol, state).isOk
	}

	public destructor() {
		this.handle = -1

		# BucketList will automatically take care of closing the file handle for us when it needs to be closed
		# (i.e. when the last reference to it dies)
		# (remember that Alta destructors *always* call class member destructors, and do so after all visible destructors run)
	}

	private @read function state(): ref SocketState {
		return this._state as ref SocketState
	}

	public function bind(address: Address, port: uint16): Result<void, Error> {
		let addr = new posix.sockaddr_in
		addr.sin_family = posix.AF_INET
		addr.sin_port = posix.htons(port)
		addr.sin_addr.s_addr = posix.htonl(address as uint32)
		if posix.bind(this.handle, &addr as ptr posix.sockaddr, sizeof posix.sockaddr_in) == -1
			return new Result<void, Error>(error: Error.SocketBindFailure)
		return new Result<void, Error>(ok: void)
	}

	public function listen(maximumConnections: unsigned int): Result<void, Error> {
		if posix.listen(this.handle, maximumConnections) == -1
			return new Result<void, Error>(error: Error.SocketListenFailure)
		return new Result<void, Error>(ok: void)
	}

	private function waitFor(read: bool = false, write: bool = false): Result<void, Error> {
		let fd = new posix.pollfd
		fd.fd = this.handle
		fd.events = 0
		if read
			fd.events |= posix.POLLIN
		if write
			fd.events |= posix.POLLOUT
		let ret = posix.poll(&fd, 1, -1)
		if ret == -1 || ret == 0 || (read && (fd.revents & posix.POLLIN) == 0) || (write && (fd.revents & posix.POLLOUT) == 0)
			return new Result<void, Error>(error: Error.PollFailure)
		return new Result<void, Error>(ok: void)
	}

	private function checkIfCan(read: bool = false, write: bool = false): Result<bool, Error> {
		let fd = new posix.pollfd
		fd.fd = this.handle
		fd.events = 0
		if read
			fd.events |= posix.POLLIN
		if write
			fd.events |= posix.POLLOUT
		let ret = posix.poll(&fd, 1, -1)
		if ret == -1
			return new Result<bool, Error>(error: Error.PollFailure)
		if ret == 0
			return new Result<bool, Error>(ok: false)
		return new Result<bool, Error>(ok: read && (fd.revents & posix.POLLIN) != 0) || (write && (fd.revents & posix.POLLOUT) != 0)
	}

	public function accept(block: bool = false): Result<Pair<Socket, Pair<Address, uint16>>, Error> {
		if block
			# TODO: don't just swallow the error
			if (let res = this.waitFor(read: true)).isError
				return res.morphError<Pair<Socket, Pair<Address, uint16>>>()
		# there *should* be a client ready to be `accept`ed now

		let addr = new posix.sockaddr_in
		let len: posix.socklen_t = sizeof posix.sockaddr_in
		let client = posix.accept(this.handle, &addr as ptr posix.sockaddr, &len)
		if client == -1 {
			let err = posix.errno
			if err == posix.EAGAIN || err == posix.EWOULDBLOCK
				if !block # if it *is* supposed to be blocking, return an error because this shouldn't happen
					return new Result<Pair<Socket, Pair<Address, uint16>>, Error>(error: Error.WouldBlock)
			return new Result<Pair<Socket, Pair<Address, uint16>>, Error>(error: Error.SocketAcceptFailure)
		}
		return new Result<Pair<Socket, Pair<Address, uint16>>, Error>(ok: new Pair<Socket, Pair<Address, uint16>>(new Socket(client, this._type, this._protocol, SocketState.Connected), new Pair<Address, uint16>(posix.ntohl(addr.sin_addr.s_addr), posix.ntohs(addr.sin_port))))
	}

	public function connect(address: Address, port: uint16, block: bool = false): Result<void, Error> {
		let addr = new posix.sockaddr_in
		addr.sin_family = posix.AF_INET
		addr.sin_port = posix.htons(port)
		addr.sin_addr.s_addr = posix.htonl(address as uint32)
		this.state = SocketState.Connecting
		if posix.connect(this.handle, &addr as ptr posix.sockaddr, sizeof posix.sockaddr_in) == -1 {
			let err = posix.errno
			if err == posix.EINPROGRESS {
				if block {
					if (let res = this.waitFor(write: true)).isError
						return res
					if !this.connected
						return new Result<void, Error>(error: Error.SocketConnectFailure)
				}
			} else {
				return new Result<void, Error>(error: Error.SocketConnectFailure)
			}
		}
		return new Result<void, Error>(ok: void)
	}

	public @read function connected(): bool {
		if this.state == SocketState.Connected
			return true
		if this.state == SocketState.Initial
			return false
		if !this.canWrite
			return false
		let err = 0
		let len = sizeof int
		assert posix.getsockopt(this.handle, posix.SOL_SOCKET, posix.SO_ERROR, &err as ptr void, &len as ptr posix.socklen_t) != -1
		if err != 0 {
			this.state = SocketState.FailedToConnect
			return false
		}
		this.state = SocketState.Connected
		return true
	}

	public @read function connecting(): bool {
		# this is not just to save work, it's also because this getter checks and updates some internal state for us
		if this.connected
			return false
		return this.state == SocketState.Connecting
	}

	public @read function connectionFailure(): bool {
		# same as in the `connecting` getter
		if this.connected
			return false
		return this.state == SocketState.FailedToConnect
	}

	public @read function canRead(): bool {
		return this.checkIfCan(read: true).value
	}

	public @read function canWrite(): bool {
		return this.checkIfCan(write: true).value
	}

	public function send(data: ptr const uint8, length: Size, block: bool = false): Result<Size, Error> {
		if block
			if (let res = this.waitFor(write: true)).isError
				return res.morphError<Size>()
		let sent = posix.send(this.handle, data as ptr const void, length, 0)
		if sent == -1 {
			let err = posix.errno
			if err == posix.EAGAIN || err == posix.EWOULDBLOCK
				if !block # the `waitFor` call should make it writable, so if it's not, then return an error
					return new Result<Size, Error>(error: Error.WouldBlock)
			return new Result<Size, Error>(error: Error.SocketSendFailure)
		}
		return new Result<Size, Error>(ok: sent as Size)
	}
	public function send(data: ptr const byte, length: Size, block: bool = false): Size? {
		return this.send(data as ptr const uint8, length, block)
	}
	public function send(data: Vector<uint8>, block: bool = false): Size? {
		return this.send(data.data, data.length, block)
	}

	# @param max The maximum number of bytes to read
	public function receive(max: Size, block: bool = false): Result<Vector<uint8>, Error> {
		if block
			if (let res = this.waitFor(read: true)).isError
				return res.morphError<Vector<uint8>>()

		let buf = new Vector<uint8>(max, 0)
		let received = posix.recv(this.handle, buf.data as ptr void, buf.length, 0)
		if received == -1 {
			let err = posix.errno
			if err == posix.EAGAIN || err == posix.EWOULDBLOCK
				if !block # `waitFor` should've already waited for data if we were asked to block
					return new Result<Vector<uint8>, Error>(error: Error.WouldBlock)
			return new Result<Vector<uint8>, Error>(error: Error.SocketReceiveFailure)
		}

		if received == 0
			return new Result<Vector<uint8>, Error>(ok: new Vector<uint8>)
		if received < buf.length
			return new Result<Vector<uint8>, Error>(ok: buf.to(received))

		return new Result<Vector<uint8>, Error>(ok: buf)
	}
	public function receive(block: bool = false): Result<Vector<uint8>, Error> {
		if !block && !this.canRead
			return null

		if block
			if (let res = this.waitFor(read: true)).isError
				return res.morphError<Vector<uint8>>()

		let len: int = 0
		if posix.ioctl(this.handle, posix.FIONREAD, &len) == -1
			return new Result<Vector<uint8>, Error>(error: Error.IOCTLFailure)

		return this.receive(len, block)
	}
}

export class TCPSocket extends Socket {
	public constructor() {
		super(SocketType.Stream, Protocol.TCP)
	}
	private @from constructor(socket: ref Socket) {
		super(socket)
	}

	public function accept(block: bool = false): Pair<TCPSocket, Pair<Address, uint16>>? {
		let maybe = super.accept(block: block)
		if maybe
			return new Pair<TCPSocket, Pair<Address, uint16>>((*maybe).first as TCPSocket, (*maybe).second)
		return null
	}
}
