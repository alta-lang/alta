import allocate, free from "memory"

# @brief Run a callback when an object reaches the end of its life
# @desc BucketList provides an easy way to schedule a callback to be called
#       when the final copy of an object is going to be destroyed.
# @note In case you're wondering why the unusual name, BucketList gets its name from
#       the common practice of creating a list of things one wishes to do before "kicking the bucket" (a.k.a. dying).
export class BucketList {
	private var refs: ptr int = nullptr
	private var callback: (() => void)? = null

	public constructor() {}

	public constructor(callback: () => void) {
		# Alta really needs `new int` so we can do `new* int`
		# (it's so easy to implement, too!)
		this.refs = allocate<int>(1)
		;*this.refs = 1
		this.callback = callback
	}

	public @copy constructor(other: ref BucketList) {
		this.refs = other.refs
		this.callback = other.callback
		if this.refs
			++*this.refs
	}

	public destructor() {
		if this.refs {
			--*this.refs
			if *this.refs == 0 && this.callback {
				(*this.callback)()
				free<int>(this.refs)
			}
		}
	}
}
