import "libc/lib/stdlib" as stdlib
import Size from "types"
import Exception, NullPointerAccess from "exceptions"

export stdlib.malloc as unsafeAllocate
export stdlib.calloc as unsafeZeroAllocate
export stdlib.free as unsafeFree
export stdlib.realloc as unsafeRealloc

export class MemoryAllocationFailure extends Exception {}

export generic function allocate<T>(count: Size): ptr T {
  let result = stdlib.malloc(count * sizeof T) as ptr T
  # some implementations return a null pointer when `count` is zero
  if count > 0 && !result {
    throw new MemoryAllocationFailure
  }
  return result
}

export generic function zeroAllocate<T>(count: Size): ptr T {
  let result = stdlib.calloc(count, sizeof T) as ptr T
  if count > 0 && !result {
    throw new MemoryAllocationFailure
  }
  return result
}

export generic function free<T>(data: ptr T): void {
  stdlib.free(data as ptr void)
}

export generic function reallocate<T>(data: ptr T, count: Size): ptr T {
  let result = stdlib.realloc(data as ptr void, count * sizeof T) as ptr T
  if count > 0 && !result {
    throw new MemoryAllocationFailure
  }
  return result
}

struct BoxNode {
  item: ptr void;
  refCount: Size;
  next: ptr BoxNode;
}

class BoxList {
  public var items: ptr BoxNode = nullptr
  public var itemCount: Size = 0

  public function has(item: ptr void): bool {
    let ptr = this.items
    while ptr != nullptr {
      if ptr.item == item
        return true
      ptr = ptr.next
    }
    return false
  }

  public this[ptr void]: ref Size {
    let ptr = this.items
    while ptr != nullptr {
      if ptr.item == $
        return ptr.refCount
      ptr = ptr.next
    }

    let node = &new* BoxNode
    node.item = $
    node.refCount = 0
    node.next = this.items
    this.items = node
    return node.refCount
  }

  public function remove(item: ptr void): void {
    let prev: ptr BoxNode = nullptr
    let ptr = this.items
    while ptr != nullptr {
      if ptr.item == item {
        if prev == nullptr {
          this.items = ptr.next
        } else {
          prev.next = ptr.next
        }
        delete* ptr
        break
      }
      ptr = ptr.next
    }
  }
}

let boxList = new BoxList

export generic class Box<T> {
  private var handle: ptr T = nullptr

  public constructor() {
    this.handle = nullptr
  }
  public @from constructor(pointer: ptr T) {
    this.handle = pointer
    this.ref()
  }
  public @from constructor(pointer: ref T) {
    this.handle = &pointer
    this.ref()
  }
  public @copy constructor(other: ref Box<T>) {
    this.handle = other.handle
    this.ref()
  }
  public destructor() {
    if this.handle != nullptr {
      let count: ref Size = boxList[this.handle as ptr void]
      if count != 0 {
        ;--count
      }
      if count == 0 {
        boxList.remove(this.handle as ptr void)
        delete* this.handle
      }
    }
  }

  private function ref(): void {
    if this.handle == nullptr
      return
    ;++boxList[this.handle as ptr void]
  }

  public to ptr T {
    return this.handle
  }
  public to ref T {
    if !this
      throw new NullPointerAccess
    return *this.handle
  }
  public to bool {
    return this.handle != nullptr
  }

  # TODO: automatically provide operators if the contained type provides it
  # e.g. if the type provides `==`, define a `==` operator the defers to the contained instance
}
