import size_t, NULL from "./stddef.alta"
#import va_list from "./stdarg.alta"
import rawconststring, rawstring from "types"
import int64_t from "./stdint.alta"

export struct FILE {
	# we only ever deal with pointers to this structure,
	# so we can leave it empty
}

##if platform == "linux"
	struct __mbstate_t {
		__count: int;

		# actually a union
		__wch: unsigned int;
	}

	export struct fpos_t {
		__pos: int64_t;
		__state: __mbstate_t;
	}
##else if platform == "darwin"
	export type fpos_t = int64_t
##end if

declare literal export function remove(filename: rawconststring): int
declare literal export function rename(oldname: rawconststring, newname: rawconststring): int
declare literal export function tmpfile(): ptr FILE
declare literal export function tmpnam(destination: rawstring): rawstring

declare literal export function fclose(stream: ptr FILE): int
declare literal export function fflush(stream: ptr FILE): int
declare literal export function fopen(filename: rawconststring, mode: rawconststring): ptr FILE
declare literal export function freopen(filename: rawconststring, mode: rawconststring, stream: ptr FILE): ptr FILE
declare literal export function setbuf(stream: ptr FILE, buffer: rawstring): void
declare literal export function setvbuf(stream: ptr FILE, buffer: rawstring, mode: int, bufferSize: size_t): int

declare literal export function fprintf(stream: ptr FILE, format: rawconststring, @native.vararg data: any...): int
declare literal export function fscanf(stream: ptr FILE, format: rawconststring, @native.vararg data: any...): int
declare literal export function printf(format: rawconststring, @native.vararg data: any...): int
declare literal export function scanf(format: rawconststring, @native.vararg data: any...): int

declare literal export function snprintf(buffer: rawstring, size: size_t, format: rawconststring, @native.vararg data: any...): int
declare literal export function sprintf(buffer: rawstring, format: rawconststring, @native.vararg data: any...): int
declare literal export function sscanf(source: rawconststring, format: rawconststring, @native.vararg data: any...): int

#declare literal export function vfprintf(stream: ptr FILE, format: rawconststring, data: va_list): int
#declare literal export function vfscanf(stream: ptr FILE, format: rawconststring, data: va_list): int
#declare literal export function vprintf(format: rawconststring, data: va_list): int
#declare literal export function vscanf(format: rawconststring, data: va_list): int

#declare literal export function vsnprintf(buffer: rawstring, size: size_t, format: rawconststring, data: va_list): int
#declare literal export function vsprintf(buffer: rawstring, format: rawconststring, data: va_list): int
#declare literal export function vsscanf(source: rawconststring, format: rawconststring, data: va_list): int

declare literal export function fgetc(stream: ptr FILE): int
declare literal export function fgets(buffer: rawstring, count: int, stream: ptr FILE): rawstring
declare literal export function fputc(character: int, stream: ptr FILE): int
declare literal export function fputs(source: rawconststring, stream: ptr FILE): int
declare literal export function getc(stream: ptr FILE): int
declare literal export function getchar(): int
declare literal export function gets(buffer: rawstring): rawstring
declare literal export function putc(character: int, stream: ptr FILE): int
declare literal export function putchar(character: int): int
declare literal export function puts(source: rawconststring): int
declare literal export function ungetc(character: int, stream: ptr FILE): int

declare literal export function fread(buffer: ptr void, elementSize: size_t, count: size_t, stream: ptr FILE): size_t
declare literal export function fwrite(buffer: ptr const void, elementSize: size_t, count: size_t, stream: ptr FILE): size_t

declare literal export function fgetpos(stream: ptr FILE, position: ptr fpos_t): int
declare literal export function fseek(stream: ptr FILE, offset: long int, origin: int): int
declare literal export function fsetpos(stream: ptr FILE, position: ptr const fpos_t): int
declare literal export function ftell(stream: ptr FILE): long int
declare literal export function rewind(stream: ptr FILE): void

declare literal export function clearerr(stream: ptr FILE): void
declare literal export function feof(stream: ptr FILE): int
declare literal export function ferror(stream: ptr FILE): int
declare literal export function perror(message: rawconststring): void

##if platform == "linux"
	export var BUFSIZ: const int = 8192
	export var EOF: const int = -1
	export var FILENAME_MAX: const int = 4096
	export var FOPEN_MAX: const int = 16
	export var L_tmpnam: const int = 20
	export var TMP_MAX: const int = 238328
##else if platform == "darwin"
	export var BUFSIZ: const int = 1024
	export var EOF: const int = -1
	export var FILENAME_MAX: const int = 1024
	export var FOPEN_MAX: const int = 20
	export var L_tmpnam: const int = 1024
	export var TMP_MAX: const int = 308915776
##end if

export var _IOFBF: const int = 0
export var _IOLBF: const int = 1
export var _IONBF: const int = 2

export var SEEK_SET: const int = 0
export var SEEK_CUR: const int = 1
export var SEEK_END: const int = 2

##if platform == "darwin"
	declare literal var __stdinp: ptr FILE
	declare literal var __stdoutp: ptr FILE
	declare literal var __stderrp: ptr FILE

	export __stdinp as stdin
	export __stdoutp as stdout
	export __stderrp as stderr
##else if platform == "linux"
	declare literal export var stdin: ptr FILE
	declare literal export var stdout: ptr FILE
	declare literal export var stderr: ptr FILE
##end if
