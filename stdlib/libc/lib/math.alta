##if platform == "linux"
@@CTranspiler.link("m");
##end if

import rawstring, rawconststring from "types"

declare literal export function fabsf(n: float): float
declare literal export function fabs(n: double): double
declare literal export function fabsl(n: long double): long double

declare literal export function fmodf(x: float, y: float): float
declare literal export function fmod(x: double, y: double): double
declare literal export function fmodl(x: long double, y: long double): long double

declare literal export function remainderf(x: float, y: float): float
declare literal export function remainder(x: double, y: double): double
declare literal export function remainderl(x: long double, y: long double): long double

declare literal export function remquof(x: float, y: float, quo: ptr int): float
declare literal export function remquo(x: double, y: double, quo: ptr int): double
declare literal export function remquol(x: long double, y: long double, quo: ptr int): long double

declare literal export function fmaf(x: float, y: float, z: float): float
declare literal export function fma(x: double, y: double, z: double): double
declare literal export function fmal(x: long double, y: long double, z: long double): long double

declare literal export function fmaxf(x: float, y: float): float
declare literal export function fmax(x: double, y: double): double
declare literal export function fmaxl(x: long double, y: long double): long double

declare literal export function fdimf(x: float, y: float): float
declare literal export function fdim(x: double, y: double): double
declare literal export function fdiml(x: long double, y: long double): long double

declare literal export function nanf(arg: rawconststring): float
declare literal export function nan(arg: rawconststring): double
declare literal export function nanl(arg: rawconststring): long double

declare literal export function expf(n: float): float
declare literal export function exp(n: double): double
declare literal export function expl(n: long double): long double

declare literal export function exp2f(n: float): float
declare literal export function exp2(n: double): double
declare literal export function exp2l(n: long double): long double

declare literal export function expm1f(n: float): float
declare literal export function expm1(n: double): double
declare literal export function expm1l(n: long double): long double

declare literal export function logf(n: float): float
declare literal export function log(n: double): double
declare literal export function logl(n: long double): long double

declare literal export function log10f(n: float): float
declare literal export function log10(n: double): double
declare literal export function log10l(n: long double): long double

declare literal export function log2f(n: float): float
declare literal export function log2(n: double): double
declare literal export function log2l(n: long double): long double

declare literal export function log1pf(n: float): float
declare literal export function log1p(n: double): double
declare literal export function log1pl(n: long double): long double

declare literal export function powf(base: float, exponent: float): float
declare literal export function pow(base: double, exponent: double): double
declare literal export function powl(base: long double, exponent: long double): long double

declare literal export function sqrtf(n: float): float
declare literal export function sqrt(n: double): double
declare literal export function sqrtl(n: long double): long double

declare literal export function cbrtf(n: float): float
declare literal export function cbrt(n: double): double
declare literal export function cbrtl(n: long double): long double

declare literal export function hypotf(x: float, y: float): float
declare literal export function hypot(x: double, y: double): double
declare literal export function hypotl(x: long double, y: long double): long double

declare literal export function sinf(n: float): float
declare literal export function sin(n: double): double
declare literal export function sinl(n: long double): long double

declare literal export function cosf(n: float): float
declare literal export function cos(n: double): double
declare literal export function cosl(n: long double): long double

declare literal export function tanf(n: float): float
declare literal export function tan(n: double): double
declare literal export function tanl(n: long double): long double

declare literal export function asinf(n: float): float
declare literal export function asin(n: double): double
declare literal export function asinl(n: long double): long double

declare literal export function acosf(n: float): float
declare literal export function acos(n: double): double
declare literal export function acosl(n: long double): long double

declare literal export function atanf(n: float): float
declare literal export function atan(n: double): double
declare literal export function atanl(n: long double): long double

declare literal export function atan2f(x: float, y: float): float
declare literal export function atan2(x: double, y: double): double
declare literal export function atan2l(x: long double, y: long double): long double

declare literal export function sinhf(n: float): float
declare literal export function sinh(n: double): double
declare literal export function sinhl(n: long double): long double

declare literal export function coshf(n: float): float
declare literal export function cosh(n: double): double
declare literal export function coshl(n: long double): long double

declare literal export function tanhf(n: float): float
declare literal export function tanh(n: double): double
declare literal export function tanhl(n: long double): long double

declare literal export function asinhf(n: float): float
declare literal export function asinh(n: double): double
declare literal export function asinhl(n: long double): long double

declare literal export function acoshf(n: float): float
declare literal export function acosh(n: double): double
declare literal export function acoshl(n: long double): long double

declare literal export function atanhf(n: float): float
declare literal export function atanh(n: double): double
declare literal export function atanhl(n: long double): long double

declare literal export function erff(n: float): float
declare literal export function erf(n: double): double
declare literal export function erfl(n: long double): long double

declare literal export function erfcf(n: float): float
declare literal export function erfc(n: double): double
declare literal export function erfcl(n: long double): long double

declare literal export function tgammaf(n: float): float
declare literal export function tgamma(n: double): double
declare literal export function tgammal(n: long double): long double

declare literal export function lgammaf(n: float): float
declare literal export function lgamma(n: double): double
declare literal export function lgammal(n: long double): long double

declare literal export function ceilf(n: float): float
declare literal export function ceil(n: double): double
declare literal export function ceill(n: long double): long double

declare literal export function floorf(n: float): float
declare literal export function floor(n: double): double
declare literal export function floorl(n: long double): long double

declare literal export function truncf(n: float): float
declare literal export function trunc(n: double): double
declare literal export function truncl(n: long double): long double

declare literal export function roundf(n: float): float
declare literal export function round(n: double): double
declare literal export function roundl(n: long double): long double

declare literal export function lroundf(n: float): long int
declare literal export function lround(n: double): long int
declare literal export function lroundl(n: long double): long int

declare literal export function llroundf(n: float): long long int
declare literal export function llround(n: double): long long int
declare literal export function llroundl(n: long double): long long int

declare literal export function nearbyintf(n: float): float
declare literal export function nearbyint(n: double): double
declare literal export function nearbyintl(n: long double): long double

declare literal export function rintf(n: float): float
declare literal export function rint(n: double): double
declare literal export function rintl(n: long double): long double

declare literal export function lrintf(n: float): long int
declare literal export function lrint(n: double): long int
declare literal export function lrintl(n: long double): long int

declare literal export function llrintf(n: float): long long int
declare literal export function llrint(n: double): long long int
declare literal export function llrintl(n: long double): long long int

declare literal export function frexpf(n: float, exponent: ptr int): float
declare literal export function frexp(n: double, exponent: ptr int): double
declare literal export function frexpl(n: long double, exponent: ptr int): long double

declare literal export function ldexpf(n: float, exponent: int): float
declare literal export function ldexp(n: double, exponent: int): double
declare literal export function ldexpl(n: long double, exponent: int): long double

declare literal export function modff(n: float, integral: ptr float): float
declare literal export function modf(n: double, integral: ptr double): double
declare literal export function modfl(n: long double, integral: ptr long double): long double

declare literal export function scalbnf(n: float, exponent: int): float
declare literal export function scalbn(n: double, exponent: int): double
declare literal export function scalbnl(n: long double, exponent: int): long double
declare literal export function scalblnf(n: float, exponent: long int): float
declare literal export function scalbln(n: double, exponent: long int): double
declare literal export function scalblnl(n: long double, exponent: long int): long double

declare literal export function ilogbf(n: float): int
declare literal export function ilogb(n: double): int
declare literal export function ilogbl(n: long double): int

declare literal export function logbf(n: float): float
declare literal export function logb(n: double): double
declare literal export function logbl(n: long double): long double

declare literal export function nextafterf(from: float, to: float): float
declare literal export function nextafter(from: double, to: double): double
declare literal export function nextafterl(from: long double, to: long double): long double

declare literal export function nexttowardf(from: float, to: long double): float
declare literal export function nexttoward(from: double, to: long double): double
declare literal export function nexttowardl(from: long double, to: long double): long double

declare literal export function copysignf(x: float, y: float): float
declare literal export function copysign(x: double, y: double): double
declare literal export function copysignl(x: long double, y: long double): long double

declare literal export function fpclassify(n: any): int

declare literal export function isfinite(n: any): bool

declare literal export function isinf(n: any): bool

declare literal export function isnan(n: any): bool

declare literal export function isnormal(n: any): bool

declare literal export function signbit(n: any): int

declare literal export function isgreater(x: any, y: any): bool

declare literal export function isgreaterequal(x: any, y: any): bool

declare literal export function isless(x: any, y: any): bool

declare literal export function islessequal(x: any, y: any): bool

declare literal export function islessgreater(x: any, y: any): bool

declare literal export function isunordered(x: any, y: any): bool

# TODO
#export var HUGE_VALF: const float = __builtin_huge_valf()
#export var HUGE_VAL: const double = __builtin_huge_val()
#export var HUGE_VALL: const long double = __builtin_huge_vall()
#export var INFINITY: const float = __builtin_huge_valf()
#export var NAN: const float = __builtin_nanf("0x7fc00000")

#export var FP_FAST_FMAF: const int = FP_FAST_FMAF
#export var FP_FAST_FMA: const int = FP_FAST_FMA
#export var FP_FAST_FMAL: const int = FP_FAST_FMAL

export var FP_ILOGB0: const int = -2147483647 - 1
export var FP_ILOGBNAN: const int = -2147483647 - 1

export var MATH_ERRNO: const int = 1
export var MATH_ERREXCEPT: const int = 2
#export var math_errhandling: const int = (__math_errhandling())

export var FP_NORMAL: const int = 4
export var FP_SUBNORMAL: const int = 5
export var FP_ZERO: const int = 3
export var FP_INFINITE: const int = 2
export var FP_NAN: const int = 1
